{
  
    
        "post0": {
            "title": "PYTHON-01-BASICS",
            "content": "Introduction . print(&quot;hello&quot;) . hello . a = 1+5j type(a) . complex . a = &quot;siddhant&quot; . type(a) . str . a = &#39;python&#39; print(a) a = &quot;sid&quot; print(a) . python sid . a = &#39;&#39;&#39; this is a multi line this is line 2 &#39;&#39;&#39; . print(a) . this is a multi line this is line 2 . Control Flow Statements . a = -10 . if a&gt;0: print(&quot;positive&quot;) elif a==0: print(&quot;zero&quot;) else: print(&quot;negative&quot;) . negative . Looping statements . while loop . a = 10 while (a&gt;0): print(a) a -= 1 . 10 9 8 7 6 5 4 3 2 1 . For loop . for i in &quot;siddhant&quot;: print(i) . s i d d h a n t . for i in range(1,11,2): print(i) . 1 3 5 7 9 . Arithmetic operator . 10//3 . 3 . 2**5 . 32 . comparision operator . &quot;abc&quot; &gt; &quot;abd&quot; . False . &quot;abc&quot; &gt; &quot;yz&quot; . False . logical operators . isinstance(1,int) . True . isinstance(True,bool) . True . a = True . isinstance(True,bool) . True . type(True) . bool . isinstance(True,int) . True . Functions . def knock(): print(&quot;knock&quot;) print(&quot;knock&quot;) . knock() . knock knock . def knock(name): print(&quot;knock {}&quot;.format(name)) . knock(&#39;sid&#39;) . knock sid . def knock(name, no_of_times): for i in range(no_of_times): print(&#39;knock {}&#39;.format(name)) . knock(&#39;sid&#39;, 6) . knock sid knock sid knock sid knock sid knock sid knock sid . Return statement . def add(a,b): return a+b . x = add(1,2) print(x) . 3 . def div(a,b): try: return a/b except: print(&#39;error&#39;) finally: print(&#39;wrapping up&#39;) . div(10,2) . wrapping up . 5.0 . div(10,0) . error wrapping up . if return statement is inside the finally block --&gt; it will discard the return in try block and will execute return of finally block only . Local and Global variables . x=10 . def show(): print(x) . show() . 10 . x = 10 # global variable def show(): x = 5 # Local variable print(x) . show() print(x) . 5 10 . def outer(): x=&#39;local&#39; def inner(): print(x) # this can access the value of local in outer inner() print(x) # this is printing the actual outer x . outer() . local local . if x is deleted from global declaration then we must write &quot;nonlocal x&quot; in inner function to look for x in outer . Default arguement values . def show(a,b,c): print(a) print(b) print(c) . show(&quot;hunng&quot;, &quot;sunng&quot;,&quot;tung&quot;) . hunng sunng tung . show(b=&quot;hungg&quot;,c=&quot;sunng&quot;,a=&quot;tung&quot;) . tung hungg sunng . print? # shift+enter opens DocString . File &#34;&lt;ipython-input-21-85e8ac2149f3&gt;&#34;, line 1 print? ^ SyntaxError: invalid syntax . packing arguments . def show(a,b,c,*args): print(args) . show(1,2,3,&quot;sidd&quot;) . (&#39;sidd&#39;,) . def show(a,b,c,*args,d=10,e=30): print(a) print(args) print(d) print(e) . show(1,2,3,&#39;sid&#39;,&#39;dy&#39;,d=100) . 1 (&#39;sid&#39;, &#39;dy&#39;) 100 30 . def show(a,b,c,*args,d=10,e=30,**kwargs): print(a) print(args) print(d) print(e) print(kwargs) . show(1,2,3,&#39;sid&#39;,&#39;dy&#39;,d=100,name = &#39;sidd&#39;) . 1 (&#39;sid&#39;, &#39;dy&#39;) 100 30 {&#39;name&#39;: &#39;sidd&#39;} . Lambda functions . syntactical sugars . def add(a,b): return a+b . add = lambda a,b: a+b . a= [1,2,3,4,5] . sorted(a) . [1, 2, 3, 4, 5] . a = [(&quot;jatin&quot;,5),(&quot;prateek&quot;,10),(&quot;ram&quot;,1),(&quot;arnav&quot;,20)] . sorted? . sorted(a) . [(&#39;arnav&#39;, 20), (&#39;jatin&#39;, 5), (&#39;prateek&#39;, 10), (&#39;ram&#39;, 1)] . . sorted(a,key = lambda x:x[1]) . [(&#39;ram&#39;, 1), (&#39;jatin&#39;, 5), (&#39;prateek&#39;, 10), (&#39;arnav&#39;, 20)] . . def key(x): return x[1] . sorted(a, key=key) . [(&#39;ram&#39;, 1), (&#39;jatin&#39;, 5), (&#39;prateek&#39;, 10), (&#39;arnav&#39;, 20)] . Decorators . #dictionary users users = { &quot;jatin&quot;:&quot;password&quot;, &quot;prateek&quot;:&quot;Coding blocks&quot; } def show(username,password): if username in users and users[username] == password: print(&quot;crackerd&quot;) else: print(&quot;not authenticated&quot;) . show(&quot;jatin&quot;,&quot;password&quot;) . crackerd . def temp(*args,**kwargs): print(args) print(kwargs) . a = (1,2,3) . temp(a) #tuple printed inside another tuple . ((1, 2, 3),) {} . temp(*a) #tuple got inflated by args and print objects . (1, 2, 3) {} . def login_required(func): def wrapper(username,password,*args,**kwargs): if username in users and users[username] == password: # user is authenticated func(*args,**kwargs) else: print(&quot;not authenticated&quot;) return wrapper . def add(a,b): print(a+b) add = login_required(add) . @login_required def add(a,b): print (a+b) . add(&quot;prateek&quot;,&quot;Coding blocks&quot;,1,2) . 3 . protected_add = login_required(add) . print(protected_add) . &lt;function login_required.&lt;locals&gt;.wrapper at 0x000001E016B94D38&gt; . protected_add(&quot;jatin&quot;,&quot;password&quot;, 1, 2) . 3 . Args and Kwargs . def fun(*args): print (args) . fun(1) . (1,) . fun(1,2,3,4) . (1, 2, 3, 4) . def fun2(a,b,*args): print(args) print(a) print(b) . fun2(1,2,3,4) . (3, 4) . def fun3(a,b,*x,**kwargs): print(x) print(kwargs) type(x) print(type(x)) type(kwargs) print(type(kwargs)) . fun3(1,2,3,4,5,6,shake=&quot;vanilla&quot;) . (3, 4, 5, 6) {&#39;shake&#39;: &#39;vanilla&#39;} &lt;class &#39;tuple&#39;&gt; &lt;class &#39;dict&#39;&gt; . Introduction to Strings . a = &quot;siddy&quot; . print(a) . siddy . a=&#39;siddy&#39; . print(a) . siddy . a = &quot;&quot;&quot; multilne string siddy &quot;&quot;&quot; . a . &#39; n multilne string n siddy n &#39; . ord? chr? . Basic String operations . a=&quot;siddy&quot; b=2 c=3 print(str(a)+&quot;-&quot;+str(b)+&quot;-&quot;+str(c)) . siddy-2-3 . print(&quot;%d-%d-%d&quot; % (a,b,c))#error occured because of wrong format . TypeError Traceback (most recent call last) &lt;ipython-input-18-5ba7d1200a95&gt; in &lt;module&gt; -&gt; 1 print(&#34;%d-%d-%d&#34; % (a,b,c))#error occured because of wrong format TypeError: %d format: a number is required, not str . print(&quot;{}-{}-{}&quot;.format(a,b,c)) . siddy-2-3 . print(&quot;{1}={0}={2}&quot;.format(a,b,c)) . 2=siddy=3 . print(&quot;{lastname},{firstname}&quot;.format(firstname = &quot;siddy&quot;, lastname = &quot;saxena&quot;)) . saxena,siddy . firstname = &quot;siddy&quot; lastname = &quot;saxena&quot; . print(f&quot;{lastname},{firstname}&quot;) . saxena,siddy . a = &quot; siddy &quot; . a . &#39; siddy &#39; . print(a.strip()) . siddy . a = input() #during input we give extra space by mistake then . yes . a== &quot;yes&quot; . False . a.strip() == &quot;yes&quot; #by using strip function extra space is removed . True . a= input() . 1 2 3 4 5 . a . &#39;1 2 3 4 5 &#39; . a.split(&#39; &#39;) . [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;&#39;] . a = &quot;siddy&quot; . a.replace(&#39;i&#39;,&#39;1&#39;) . &#39;s1ddy&#39; . a = &#39;aaabbbccc&#39; a.count(&#39;a&#39;) . 3 . a.count(&#39;aa&#39;) . 1 . Introduction to lists . a =[1,2,3,4,5] id(a) # gives memory address of a . 2836804091144 . a . [1, 2, 3, 4, 5] . a=[&quot;siddy&quot;,1,0.6,print] . a[3] . &lt;function print&gt; . a[2] = 8 #mutability . a[2] print(id(a)) . 2836804091144 . a[3](&quot;siddhant&quot;) . siddhant . a*2 . [&#39;siddy&#39;, 1, 0.6, &lt;function print&gt;, &#39;siddy&#39;, 1, 0.6, &lt;function print&gt;] . len(a) . 4 . 1 in a . True . for x in a : print(x) . siddy 1 0.6 &lt;built-in function print&gt; . #backword indexing a[-2] . 0.6 . a[1:5] . [1, 0.6, &lt;function print&gt;] . a = [1,2,3,4,5] . a[1:4] . [2, 3, 4] . a[0:5] . [1, 2, 3, 4, 5] . a[::-1] . [5, 4, 3, 2, 1] . a = &quot;nitin&quot; . a == a[::-1] . True . a = [1,2,3,4,5] . a.insert? . a.insert(1,&#39;sid&#39;) . a . [1, &#39;sid&#39;, 2, 3, 4, 5] . a.append(&quot;saxena&quot;) . a . [1, &#39;sid&#39;, 2, 3, 4, 5, &#39;saxena&#39;] . a.pop() . &#39;saxena&#39; . a . [1, &#39;sid&#39;, 2, 3, 4, 5] . a.pop(2) . 2 . a . [1, &#39;sid&#39;, 3, 4, 5] . a = [&quot;sid&quot;,&quot;sad&quot;,&quot;tit&quot;,&quot;sad&quot;] . a.remove(&quot;sad&quot;) . a . [&#39;sid&#39;, &#39;tit&#39;, &#39;sad&#39;] . del a[1] . a . [&#39;sid&#39;, &#39;sad&#39;] . . a = [1,4,5,3,7,2] . sorted(a) # returns the list . [1, 2, 3, 4, 5, 7] . a.sort() # sorts list inplace hence do not return the list . a . [1, 2, 3, 4, 5, 7] . . for x in reversed(a): print(x) . 7 5 4 3 2 1 . a.reverse() . a . [7, 5, 4, 3, 2, 1] . Tuples . a = (1,2,3,4,5) b = 1,2 . print(a) print(b) . (1, 2, 3, 4, 5) (1, 2) . a[0] =9 . TypeError Traceback (most recent call last) &lt;ipython-input-61-e5f0dc60e901&gt; in &lt;module&gt; 1 # not mutable 2 -&gt; 3 a[0] =9 TypeError: &#39;tuple&#39; object does not support item assignment . a =5 b = 9 temp = a a = b b = temp . print(a,b) . 9 5 . a = (5,8) . c,d = a . c . 5 . d . 8 . a =5 b=9 . b,a = a,b . print(a,b) . 5 9 . . a = (1,2,3,4) a = list(a) . a . [1, 2, 3, 4] . . def addSubstract(a,b): return a+b,a-b . sum, diff = addSubstract(9,3) . sum . 12 . diff . 6 . Dictionary . . a = { &quot;name&quot;:&quot;siddhant&quot;, &quot;phonne&quot;:7771088776, &quot;subjects&quot;:[&quot;eng&quot;,&quot;math&quot;], &quot;friends&quot;:{ &quot;pulkit&quot;:&quot;android dev&quot; } } . a[&quot;name&quot;] . &#39;siddhant&#39; . a[&quot;friends&quot;] . {&#39;pulkit&#39;: &#39;android dev&#39;} . for key in a : print(key) . name phonne subjects friends . . for key,values in a.items(): print(key,&quot;=&gt;&quot;,values) . name =&gt; siddhant phonne =&gt; 7771088776 subjects =&gt; [&#39;eng&#39;, &#39;math&#39;] friends =&gt; {&#39;pulkit&#39;: &#39;android dev&#39;} . . students = [] . n = int(input()) . 2 . for x in range(n): roll= int(input()) name= input() branch= input() students.append({ &quot;roll_no&quot;:roll, &quot;name&quot;:name, &quot;branch&quot;:branch }) . 2 sdfg it 3 dfgh cce . for s in students: print(s) . {&#39;roll_no&#39;: 2, &#39;name&#39;: &#39;sdfg&#39;, &#39;branch&#39;: &#39;it&#39;} {&#39;roll_no&#39;: 3, &#39;name&#39;: &#39;dfgh&#39;, &#39;branch&#39;: &#39;cce&#39;} . students . [{&#39;roll_no&#39;: 2, &#39;name&#39;: &#39;sdfg&#39;, &#39;branch&#39;: &#39;it&#39;}, {&#39;roll_no&#39;: 3, &#39;name&#39;: &#39;dfgh&#39;, &#39;branch&#39;: &#39;cce&#39;}] . sets . a = {1,2,3,4,5} . type(a) . set . b = {3,4,5,6,7} . a.intersection(b) . {3, 4, 5} . a.union(b) . {1, 2, 3, 4, 5, 6, 7} . a = {1,2,3,4,5,4,6,3} . a . {1, 2, 3, 4, 5, 6} . len(a) . 6 . . a = [1,2,1,1,2] #remove duplicates . list(set(a)) #list - &gt; set -&gt; list conversion . [1, 2] . Comprehension of DS in Python . a = [] for x in range(10): a.append(x**2) . print(a) . [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] . List Comprehension . [x**2 for x in range(10)] . [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] . [x**2 for x in range(10) if x%2 == 0] . [0, 4, 16, 36, 64] . Dictionary Comprehension . {i:i**2 for i in range(10)} . {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81} . Set Comprehension . {i**2 for i in range(10)} . {0, 1, 4, 9, 16, 25, 36, 49, 64, 81} . OOP Basics . class Person: pass . p = Person() . print(p) # person class executed in main module . &lt;__main__.Person object at 0x00000159C8DA9708&gt; . hex(id(p)) #hex value of address . &#39;0x159c8da9708&#39; . a = 1 # every thing in python is a class . print(type(a)) . &lt;class &#39;int&#39;&gt; . a = 1 . print(isinstance(a,object)) . True . The _init_method . class Person: name = &quot;siddy&quot; def say_hi(self): print(&quot;hello my name is &quot;,self.name) . p = Person() . p.say_hi() . hello my name is siddy . Person.say_hi(p) . hello my name is siddy . class Person: def __init__(self, name): print(&quot;a new object is created&quot;) self.name = name def say_hi(self): print(&quot;hello my name is &quot;,self.name) . p = Person(&quot;siddy&quot;) . a new object is created . p.say_hi() . hello my name is siddy . Dunders and Magic methods . class Car: def __init__(self,model,milage): self.model = model self.milage = milage def __str__(self): return &quot;{} {}&quot;.format(self.model,self.milage) def __repr(self): # representation function that&#39;ll jst gonna print model of it return &#39;{}&#39;.format(self.model) def __eq__(self,other): #equal to operator return self.milage == other.milage def __add__(self,other): return self.milage + other.milage . c1 = Car(&#39;a&#39;,2) c2 = Car(&#39;b&#39;,3) . c1+c2 . 5 . c1==c2 . False . google dunders in python in docs of python - - data model . . class Ostream: def __lshift__(self,other): print(other, end = &#39;&#39;) return self # this is important because id eqtn is cout&lt;&lt;&quot;siddy&quot;&lt;&lt;&quot;saxena&quot; then for &lt;&lt;&quot;saxena&quot; self should returned again cout = Ostream() . cout&lt;&lt;&quot;siddy&quot;&lt;&lt;&quot; &quot;&lt;&lt;&quot;should&quot; . siddy should . &lt;__main__.Ostream at 0x180f9366088&gt; . . class Dog: kind = &#39;canine&#39; # class attribute(variable)shared by all instances def __init__(self,name): self.name = name . a = Dog(&#39;tuffy&#39;) . a.kind #gives output canine because it was copied in &quot;Object oriented programming and modules.ipynb&quot; . &#39;canine&#39; . b = Dog(&#39;xxx&#39;) . b.kind = &#39;something&#39; . b.kind . &#39;something&#39; . a.kind . &#39;canine&#39; . class Dog: tricks = [] def __init__(self,name): self.name = name def add_trick(self,trick): self.tricks.append(trick) . a = Dog(&#39;xxx&#39;) . b = Dog(&#39;yyy&#39;) . a.add_trick(&#39;fetch &#39;) . a.add_trick(&#39;talk&#39;) . a.tricks . [&#39;fetch &#39;, &#39;talk&#39;] . b.tricks . [&#39;fetch &#39;, &#39;talk&#39;] . id(a.tricks) . 2752786024520 . id(b.tricks) . 2752786024520 . . . class Dog: def __init__(self,name): self.name = name self.tricks = [] def add_trick(self,trick): self.tricks.append(trick) . Inheritance . class SchoolMember: def __init__(self,name,age): self.name = name self.age = age print(&quot;(Inintialised member = {})&quot;.format(self.name)) def tell(self): print(&#39;name:&quot;{}&quot; Age:&quot;{}&quot;&#39;.format(self.name,self.age),end = &quot; &quot;) class Teacher(SchoolMember): def __init__(self,name,age,salary): super().__init__(name,age) # same as SchoolMember.__init__(self,name,age) overriding self.salary = salary print(&quot;Initialised Teacher: {}&quot;.format(self.name)) def tell(self): SchoolMember.tell(self) print(&#39;salary: {:d}&#39;.format(self.salary)) class Student(SchoolMember): def __init__ (self,name,age,marks): SchoolMember.__init__(self,name,age) self.marks = marks print(&#39;(itialised Student &quot;{}&quot;)&#39;.format(self.name)) def tell(self): SchoolMember.tell(self) print(&#39;marks: &quot;{:d}&quot;&#39;.format(self.marks)) . t = Teacher(&quot;mrsiddy&quot;,40,30000) s = Student(&quot;sid&quot;,40,70) . (Inintialised member = mrsiddy) Initialised Teacher: mrsiddy (Inintialised member = sid) (itialised Student &#34;sid&#34;) . Method Resolution Order . . class A: x = 10 class B(A): pass class C(A): x = 5 class D(C): x = 5 class E(B, D): pass . E.x . 5 . E.__mro__ . (__main__.E, __main__.B, __main__.D, __main__.C, __main__.A, object) . Modules in python . PYTHON-07-Iterators and Generators . x = [1,2,3] # iterable . x_iter = iter(x) . x_iter . &lt;list_iterator at 0x1cb81be2f48&gt; . next(x_iter) . 1 . next(x_iter) . 3 . Making our own Iterator . class yrange: def __init__ (self,n): self.i=0 self.n =n def __iter__(self): return self def __next__(self): if self.i&lt;self.n: i = self.i self.i += 1 return i else: raise StopIteration() . for x in yrange(5): print(x) . 0 1 2 3 4 . y = yrange(5) . list(y) . [0, 1, 2, 3, 4] . list(y) # can not consume multiple times . [] . y_iter = iter(y) . y_iter . &lt;__main__.yrange at 0x1cb81bebfc8&gt; . next(y_iter) . 1 . next(y_iter) . # this is an iterable class class zrange: def __init__ (self,n): self.n =n def __iter__ (self): return zrange_iter(self.n) # this is an iterator class class zrange_iter: def __init__ (self, n): self.i = 0 self.n =n def __iter__ (self): return self def __next__(self): if self.i &lt;self.n: i = self.i self.i += 1 return i else: raise StopIteration() . for x in zrange(5): print(x**2) . 0 1 4 9 16 . z = zrange(10) # now we can consume it multiple times . list(z) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . list(z) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Iterators . a = [1,[2,3],4] for x in a: print(x) . 1 [2, 3] 4 . name = &#39;siddy&#39; for char in name: print(char) . s i d d y . d = { &quot;name&quot; :&quot;siddy&quot;, &quot;class&quot;:&quot;ITc&quot;, &quot;marks&quot;:200 } . for x in d: print(x) #return keys . name class marks . for line in open(&quot;iterator.txt&quot;,&quot;r&quot;): print(line) . hello my name is siddy . . &quot;.&quot;.join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]) . &#39;a.b.c&#39; . a = list(&quot;siddy&quot;) . a . [&#39;s&#39;, &#39;i&#39;, &#39;d&#39;, &#39;d&#39;, &#39;y&#39;] . Generators . # 0 1 1 2 3 5 8 . class fib: def __init__(self): self.prev = 0 self.curr = 1 def __iter__(self): # this class is also an iterator return self def __next__(self): value = self.curr self.curr += self.prev self.prev = value return value . f = iter(fib()) . next(f) . 55 . . def fib(): prev, curr = 0, 1 while True: yield curr prev, curr =curr, prev+curr . type(fib()) . generator . gen = fib() . next(gen) . 2 . . gen = (x**2 for x in range(1,11)) . print(gen) . &lt;generator object &lt;genexpr&gt; at 0x000001CB81BDD648&gt; . next(gen) . 16 . next(gen) . StopIteration Traceback (most recent call last) &lt;ipython-input-94-6e72e47198db&gt; in &lt;module&gt; -&gt; 1 next(gen) StopIteration: . PYTHON-06-File and Error handling . TEXT Files . Opening a file . file = open(&quot;filehandeling.txt&quot;,&quot;r&quot;) . file.read(4) . file.read() . we can also provide no of bytes it needs to read . file.read(4) . closing a file . it is a vimp task , coz if file is not closed it might lead to file getting corrupted . file.close() . Writing to a file . file = open(&quot;writemode.txt&quot;,&quot;w&quot;) . file.write(&quot;helllo from other side&quot;) # returns us a integer which rep no of bytes which are written to this file . file.close() . Reading from a file . file = open(&quot;filehandeling.txt&quot;,&quot;r&quot;) . file.readline() #read lines according to no of time executed . file.readlines() # read the file in one go and created the list of all lines . file.close() . Moving the cursor . seek(n) - takes the file handle to the nth byte from the begining . file = open(&quot;writemode.txt&quot;,&#39;r&#39;) . file.read(5) . file.read() # ill be missing the first 5 characters bcoz cursor moved there . file.seek(0) . file.read() . file.close() . Smarter way of opening files . with statement- open this file in read mode and resultant of this file will be stored in file object . with open(&quot;writemode.txt&quot;,&#39;r&#39;) as file: print(file.read()) file.seek(5) print(file.read()) . but if we want file.read() out side of block it will throw error . working with JSON files . import json . with open(&quot;data.json&quot;,&quot;r&quot;) as file: print(file.read()) . json.load() method . with open(&quot;data.json&quot;,&quot;r&quot;) as file: d = json.load(file) print(d) print(type(d)) print(d[&quot;name&quot;]) print(d[&quot;marks&quot;]) print(d[&quot;subject&quot;][0]) . using strings . with open(&quot;data.json&quot;,&quot;r&quot;) as file: data = file.read() . print(data) d = json.loads(data) #s in loads represent string . print(d) . convert a dictionary to json files or a json string . d ={&#39;name&#39;: &#39;siddy&#39;, &#39;marks&#39;: 90, &#39;subject&#39;: [&#39;eng&#39;, &#39;math&#39;]} . string = json.dumps(d) . print(string) . print(type(string)) . creating a josn file from a dictionary . d ={&#39;name&#39;: &#39;siddy&#39;, &#39;marks&#39;: 90, &#39;subject&#39;: [&#39;eng&#39;, &#39;math&#39;]} . while open(&quot;data2.json&quot;, &quot;w&quot;) as file: json.dump(d,file) . Error &amp; Exception handling . -try -except . def div(a, b): print(a/b) . div(10, 0) . def div2(a, b): try: print(a/b) except: print(&quot;not executable&quot;) . div2(10, 0) . modification in except block . def div2(a, b): try: print(a/b) except ZeroDivisionError : print(&quot;not executable&quot;) . div2(10,0) . type conversion example except expression wont work here . try: a = int(&quot;sid&quot;) . except ZeroDivisionError : print(&quot;error&quot;) . to handle multiple exception cases . try: a = int(&quot;sid&quot;) . except ZeroDivisionError : print(&quot;error&quot;) . except : print(&quot;some error occures&quot;) . def div3(a, b): try: print(a/b) except Exception as e: # base class in python from which all exceptions are derrived print(e) . Creating exception . raise statement . try : raise Exception(&quot;my custom error&quot;,1,2) except Exception as e: print(e) . class MyExceptions(Exception): def init(self, message): self.message = message def str (self): return self.message . try: raise MyException (&quot;some error&quot;) expect Expection as e : print(e.messabe) . Else statement - will always execute if the try block didnt threw any error . Filnally statement - will always execute . try: print(&quot;hello world&quot;) print(10/0) except: print(&quot;error&quot;) else: print(&quot;woah&quot;) finally: #used for cleaning code print(&quot;bye bye&quot;) . def func(): try: return 1 # here return statement of try will get truncated finally: return 2 # will executed any how . func() . With statement - when we have pre defined clean-up action . try: file = open(&quot;abc.txt&quot;,&quot;r&quot;) print(file.read()) except Exception as e: print(e) . finally: file.close() . with open(&quot;abc.txt&quot;,&quot;r&quot;) as file: print(file.read()) . to use with statement compitable for class we have to include two dunders enter and exit . class A: def init(self,n): self.n = n def str (self): return str(self.n) def enter (self): return self def exit (self, *args): print(args) return True . with A(5) as a: print(a) raise 10/0 print(&quot;hello&quot;) .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/20/INTRODUCTORY-PYTHON.html",
            "relUrl": "/2021/04/20/INTRODUCTORY-PYTHON.html",
            "date": " • Apr 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mr-siddy.github.io/The-Student-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mr-siddy.github.io/The-Student-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mr-siddy.github.io/The-Student-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}