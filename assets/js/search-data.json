{
  
    
        "post0": {
            "title": "Exploratory Data Analysis with Python and Applying Logistic Regression",
            "content": "Import Libraries . import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline . The Data . train = pd.read_csv(&#39;titanic_train.csv&#39;) . train.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . Missing Data . train.isnull() # if True indicates a null value # but it is not a good way as data set can be vast . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 False | False | False | False | False | False | False | False | False | False | True | False | . 1 False | False | False | False | False | False | False | False | False | False | False | False | . 2 False | False | False | False | False | False | False | False | False | False | True | False | . 3 False | False | False | False | False | False | False | False | False | False | False | False | . 4 False | False | False | False | False | False | False | False | False | False | True | False | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 886 False | False | False | False | False | False | False | False | False | False | True | False | . 887 False | False | False | False | False | False | False | False | False | False | False | False | . 888 False | False | False | False | False | True | False | False | False | False | True | False | . 889 False | False | False | False | False | False | False | False | False | False | False | False | . 890 False | False | False | False | False | False | False | False | False | False | True | False | . 891 rows × 12 columns . sns.heatmap(train.isnull(),yticklabels = False, cbar =False, cmap=&#39;viridis&#39;) # so most of the null values are present in age and cabin . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a91cd84c8&gt; . sns.set_style(&#39;whitegrid&#39;) sns.countplot(x=&#39;Survived&#39;,data=train) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a91d397c8&gt; . sns.set_style(&#39;whitegrid&#39;) sns.countplot(x=&#39;Survived&#39;,hue=&#39;Sex&#39;,data=train, palette=&#39;RdBu_r&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a92b67d88&gt; . sns.set_style(&#39;whitegrid&#39;) sns.countplot(x=&#39;Survived&#39;,hue=&#39;Pclass&#39;,data=train, palette=&#39;rainbow&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a92c2ee88&gt; . sns.distplot(train[&#39;Age&#39;].dropna(), kde=False, color=&#39;darkred&#39;, bins=40) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a92ca32c8&gt; . train[&#39;Age&#39;].hist(bins=30, color=&#39;blue&#39;,alpha=0.3) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a92daeb88&gt; . sns.countplot(x=&#39;SibSp&#39;, data=train) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a92e6f2c8&gt; . train[&#39;Fare&#39;].hist(bins=30,color=&#39;green&#39;,alpha=0.4) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a92ed4e48&gt; . Data Cleaning . plt.figure(figsize=(12,7)) sns.boxplot(x=&#39;Pclass&#39;,y=&#39;Age&#39;,data=train,palette=&#39;winter&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a92c2e5c8&gt; . we can see the wealthrer passengers in the higher classes tend to older, which makes sense, we&#39;ll use these average age values to impute based on pcalss for age . def impute_age(cols): Age = cols[0] Pclass = cols[1] if pd.isnull(Age): if Pclass == 1: return 37 elif Pclass == 2: return 29 else: return 24 else: return Age . train[&#39;Age&#39;] = train [[&#39;Age&#39;,&#39;Pclass&#39;]].apply(impute_age,axis=1 ) # now check heatmap again . sns.heatmap(train.isnull(),yticklabels = False, cbar =False, cmap=&#39;viridis&#39;) # so most of the null values are present in age and cabin . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a931ec508&gt; . we have to apply a lot of feature engineering to handle Cabin coz of a lot of Nan values hence we&#39;ll drop it for now . train.drop(&#39;Cabin&#39;,axis=1,inplace=True) . sns.heatmap(train.isnull(),yticklabels = False, cbar =False, cmap=&#39;viridis&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a93031ac8&gt; . train.dropna(inplace=True) . sns.heatmap(train.isnull(),yticklabels = False, cbar =False, cmap=&#39;viridis&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x19a930b6148&gt; . train.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | S | . Converting Categorical Features . we&#39;ll need to convert categorical features to dummy variables using pandas, otherwise our machine learning algorithm wont be able to directly take in those features as inputs . train.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 889 entries, 0 to 890 Data columns (total 11 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 889 non-null int64 1 Survived 889 non-null int64 2 Pclass 889 non-null int64 3 Name 889 non-null object 4 Sex 889 non-null object 5 Age 889 non-null float64 6 SibSp 889 non-null int64 7 Parch 889 non-null int64 8 Ticket 889 non-null object 9 Fare 889 non-null float64 10 Embarked 889 non-null object dtypes: float64(2), int64(5), object(4) memory usage: 83.3+ KB . pd.get_dummies(train[&#39;Embarked&#39;],drop_first=True).head() . Q S . 0 0 | 1 | . 1 0 | 0 | . 2 0 | 1 | . 3 0 | 1 | . 4 0 | 1 | . sex = pd.get_dummies(train[&#39;Sex&#39;],drop_first=True) embark = pd.get_dummies(train[&#39;Embarked&#39;],drop_first=True) . train.drop([&#39;Sex&#39;,&#39;Embarked&#39;,&#39;Name&#39;,&#39;Ticket&#39;],axis=1,inplace=True) . train.head() . PassengerId Survived Pclass Age SibSp Parch Fare . 0 1 | 0 | 3 | 22.0 | 1 | 0 | 7.2500 | . 1 2 | 1 | 1 | 38.0 | 1 | 0 | 71.2833 | . 2 3 | 1 | 3 | 26.0 | 0 | 0 | 7.9250 | . 3 4 | 1 | 1 | 35.0 | 1 | 0 | 53.1000 | . 4 5 | 0 | 3 | 35.0 | 0 | 0 | 8.0500 | . train = pd.concat([train,sex,embark],axis=1) . train.head() . PassengerId Survived Pclass Age SibSp Parch Fare male Q S . 0 1 | 0 | 3 | 22.0 | 1 | 0 | 7.2500 | 1 | 0 | 1 | . 1 2 | 1 | 1 | 38.0 | 1 | 0 | 71.2833 | 0 | 0 | 0 | . 2 3 | 1 | 3 | 26.0 | 0 | 0 | 7.9250 | 0 | 0 | 1 | . 3 4 | 1 | 1 | 35.0 | 1 | 0 | 53.1000 | 0 | 0 | 1 | . 4 5 | 0 | 3 | 35.0 | 0 | 0 | 8.0500 | 1 | 0 | 1 | . Building a Logistic Regression Model . Train Test Split . train.drop(&#39;Survived&#39;,axis=1).head() . PassengerId Pclass Age SibSp Parch Fare male Q S . 0 1 | 3 | 22.0 | 1 | 0 | 7.2500 | 1 | 0 | 1 | . 1 2 | 1 | 38.0 | 1 | 0 | 71.2833 | 0 | 0 | 0 | . 2 3 | 3 | 26.0 | 0 | 0 | 7.9250 | 0 | 0 | 1 | . 3 4 | 1 | 35.0 | 1 | 0 | 53.1000 | 0 | 0 | 1 | . 4 5 | 3 | 35.0 | 0 | 0 | 8.0500 | 1 | 0 | 1 | . train[&#39;Survived&#39;].head() . 0 0 1 1 2 1 3 1 4 0 Name: Survived, dtype: int64 . from sklearn.model_selection import train_test_split . X_train,X_test,y_train,y_test = train_test_split(train.drop(&#39;Survived&#39;,axis=1),train[&#39;Survived&#39;],test_size=0.30,random_state=101) . Training and Predicting . from sklearn.linear_model import LogisticRegression . logmodel = LogisticRegression() logmodel.fit(X_train,y_train) . C: Users mrsid anaconda3 lib site-packages sklearn linear_model _logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG) . LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, l1_ratio=None, max_iter=100, multi_class=&#39;auto&#39;, n_jobs=None, penalty=&#39;l2&#39;, random_state=None, solver=&#39;lbfgs&#39;, tol=0.0001, verbose=0, warm_start=False) . predictions = logmodel.predict(X_test) . from sklearn.metrics import confusion_matrix . accuracy = confusion_matrix(y_test,predictions) . accuracy . array([[149, 14], [ 39, 65]], dtype=int64) . from sklearn.metrics import accuracy_score . accuracy = accuracy_score(y_test,predictions) accuracy . 0.8014981273408239 . predictions . array([0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], dtype=int64) .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/25/EDA.html",
            "relUrl": "/2021/04/25/EDA.html",
            "date": " • Apr 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Matplotlib",
            "content": "import matplotlib.pyplot as plt %matplotlib inline . import numpy as np . x = np.arange(0,10) y=np.arange(11,21) . a=np.arange(40,50) b=np.arange(50,60) . Scatter plot . plt.scatter(x,y,c=&#39;g&#39;) # c= color plt.xlabel(&#39;X axis&#39;) plt.ylabel(&#39;Y axis&#39;) plt.title(&#39;Graph in 2D&#39;) plt.savefig(&#39;g1.png&#39;) plt.show() . plt plot . plt.plot(x,y) . [&lt;matplotlib.lines.Line2D at 0x20b5b3bef48&gt;] . y=x*x plt.plot(x,y) . [&lt;matplotlib.lines.Line2D at 0x20b5b4228c8&gt;] . plt.plot(x,y,&#39;r&#39;) . [&lt;matplotlib.lines.Line2D at 0x20b5b447d08&gt;] . plt.plot(x,y,&#39;r--&#39;) . [&lt;matplotlib.lines.Line2D at 0x20b5b4ef748&gt;] . plt.plot(x,y,&#39;r*-&#39;) . [&lt;matplotlib.lines.Line2D at 0x20b5b562fc8&gt;] . Subplots . plt.subplot(2,2,1) # 2 rows 2 cols 1 position plt.plot(x,y,&#39;r&#39;) plt.subplot(2,2,2) plt.plot(x,y,&#39;g&#39;) plt.subplot(2,2,3) plt.plot(x,y,&#39;b&#39;) . [&lt;matplotlib.lines.Line2D at 0x20b5b61f088&gt;] . . np.pi . 3.141592653589793 . x = np.arange(0,4*np.pi,0.1) y=np.sin(x) plt.title(&quot;sine wave form&quot;) plt.plot(x,y) plt.show() . x=np.arange(0,5*np.pi,0.1) y_sin = np.sin(x) y_cos = np.cos(x) plt.subplot(2,1,1) plt.plot(x,y_sin,&#39;r--&#39;) plt.title(&quot;sine graph&quot;) plt.subplot(2,1,2) plt.plot(x,y_cos,&#39;g--&#39;) plt.title(&quot;cosine graph&quot;) plt.show() . Bar plot . x= [2,8,10] y = [11,16,18] x2 = [3,9,11] y2 = [4,7,9] plt.bar(x,y) plt.bar(x2,y2,color =&#39;g&#39;) plt.title(&#39;Bar graph&#39;) plt.ylabel( &#39;Yaxis&#39;) plt.xlabel( &#39;Xaxis&#39;) plt.show() . Histograms . a = np.array([1,2,3,4,5,5,6,67,7,8,8,9]) # y axis == bins - desity or count plt.hist(a) plt.title(&#39;histogram&#39;) plt.show() . Box plot . data = [np.random.normal(0,std,100) for std in range(1,4)] # selecting a normal distribution b/w low=0, to std, step=100 # rectangular box plot plt.boxplot(data, vert=True, patch_artist= True) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x20b5bb46688&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb46f08&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb55d08&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb55e88&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb6b188&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb6ba08&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x20b5bb4b8c8&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb4bf48&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb5bdc8&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb5bec8&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb6bb88&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb71a08&gt;], &#39;boxes&#39;: [&lt;matplotlib.patches.PathPatch at 0x20b5bb46048&gt;, &lt;matplotlib.patches.PathPatch at 0x20b5bb50fc8&gt;, &lt;matplotlib.patches.PathPatch at 0x20b5bb65ac8&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x20b5bb4bfc8&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb5fd08&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb71b88&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x20b5bb50f08&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb5fe08&gt;, &lt;matplotlib.lines.Line2D at 0x20b5bb76a08&gt;], &#39;means&#39;: []} . data . [array([-0.7784494 , -0.30130908, 0.54002525, -0.51800759, 0.01819769, -0.83990426, -0.28781469, 0.04318482, 1.23528389, 2.1785494 , -2.0737086 , 1.0928547 , -0.0187436 , 1.26047616, -0.22879622, 0.7987299 , -1.32200805, 1.5095032 , -0.90634209, -0.88452427, 0.21450132, -0.33105648, -0.89893418, 0.2640048 , 0.18846496, -0.13365763, -0.56769452, 1.70685974, 2.50448167, -0.71739823, -2.15135456, -0.79866835, 0.01126657, 0.03509671, 0.70977944, -0.48825295, -0.51388798, 0.03850738, -0.11959896, -1.44425172, -0.48869629, 1.99891486, -0.79457436, 0.82734671, -0.21331385, -1.01447424, -1.62881497, 1.55287689, -0.76185124, -1.33031956, -0.24552639, 0.07408732, -2.05106282, 1.08293709, -0.39720809, -0.37170031, -0.78308727, 0.94345425, -1.61168896, 0.75191668, -0.19178661, 0.35292808, -0.32761845, -0.12057788, -0.90665516, 0.61673275, 0.3552815 , -0.75085115, 0.95438335, -0.4752099 , -1.22754795, 0.90739187, 0.98549253, 1.17860435, -0.47033725, -1.11863367, -2.1007785 , -1.28848407, -0.97587155, -1.50746364, 0.15689869, -1.29434923, 0.95408283, 0.38562582, 1.09328084, -0.83567472, 1.46300781, 0.21707649, 1.04889211, 0.13129867, 0.78442675, 0.21995366, 1.63712729, 1.50326651, 0.28453443, -0.2031552 , -0.28490282, 1.33678566, 2.37008989, 0.79503051]), array([ 1.23556973, -0.02072204, -1.12229404, -2.96722053, -1.30085601, -2.60421508, 1.24700109, -0.31148209, -2.52475577, -3.79873713, -0.5184776 , -1.40388223, -0.76082764, 1.21536502, -0.98142646, 0.43235375, 2.01282379, -0.21453285, 3.61200475, 1.8287454 , -2.37699005, -4.43876649, -1.5534308 , 0.19087839, 0.63776082, -3.89796591, -0.77253082, 0.15942456, 1.50682854, -2.13153439, -0.03070496, -0.87138476, -3.60486968, -3.73673651, 1.36459964, -0.57526159, 1.74855 , -1.59916748, -2.53317411, 0.34688596, -0.39179164, 3.50326963, -2.16398775, 1.6853139 , 0.93583756, -3.19704488, 2.29302575, 0.1907704 , 1.65541487, -1.30203682, 2.56856035, 0.0327959 , 4.19304044, -1.00926479, -2.24279789, -0.69572595, -1.76483291, 3.0767504 , -2.20523853, 3.85941305, 0.02224512, 0.51100795, -0.64877433, -0.97541769, -0.55332363, 0.68110681, 1.04656981, -1.66401884, -2.22326276, 2.5260883 , 1.23117647, -0.60578903, 0.08622414, 1.41381078, -2.7653705 , -0.97335699, 2.92662744, -0.83610816, 2.29915347, 0.01851729, -1.31768037, -1.48470864, 1.02320517, 0.44434635, -3.43562133, -0.4494547 , 0.08147359, 3.30459418, 1.80139721, -1.308831 , -0.99884576, -1.46526386, -0.54199541, 1.12811024, 2.97529432, 1.64583481, -0.78990555, -0.74874302, -4.4103771 , -2.48981923]), array([ 3.95391703e+00, -1.07121577e+00, -3.84668853e+00, 6.77840007e+00, -2.19381045e+00, 7.10352670e-01, 6.73618307e-01, 1.37069922e+00, -3.81843396e+00, 1.26967121e+00, -2.22084017e+00, -3.53653835e+00, 9.12261523e-01, 3.46900445e+00, 5.60861189e-01, 1.81888792e+00, 7.13406114e-01, -3.34833646e+00, 1.39887349e+00, -1.53083906e+00, 3.99241572e+00, -1.95620365e+00, -1.32736259e+00, 1.45314767e+00, 1.86896524e+00, 1.41268309e+00, -2.04054499e+00, -3.22104097e+00, -3.38356292e+00, -1.07288730e+00, -2.13342416e+00, -1.17784314e+00, -5.50678185e-01, -2.93018741e+00, 6.09593785e+00, 3.56688350e-01, -2.74400006e+00, 1.41395686e+00, -1.06679209e+00, 3.99608167e+00, -1.63810367e+00, 3.26794993e+00, -2.17703756e+00, 5.76026096e+00, -3.16019468e+00, -2.04739358e+00, -9.21248072e-01, -1.17306562e+00, -1.40941302e+00, -3.39076210e+00, 8.42848917e+00, -2.23424984e+00, 1.51486619e+00, 3.39342705e+00, -3.71272706e+00, 9.32418444e+00, -2.89173783e+00, -7.17807468e-01, 6.45628003e+00, 2.46759215e+00, -5.40677123e-01, 1.03397626e+00, -4.61687260e-01, 2.28964222e+00, -1.45379187e+00, 1.09286059e+00, 1.66547924e+00, 2.60394771e+00, 3.59662329e-02, -1.58705864e+00, -2.26368232e+00, 2.50848563e+00, -1.72671381e+00, -3.19559078e+00, -9.92987939e-01, 8.91871959e-01, 1.03963870e+00, -4.01271402e-01, 3.12010149e+00, -1.35404888e+00, 2.93841033e+00, -9.41879808e-02, 5.56786269e-01, -9.35989605e-01, 1.10483247e+00, -1.21961918e+00, -4.03470597e-01, -1.41275722e-01, 2.15839643e-01, -2.90275833e+00, 6.03367683e+00, 4.09121350e+00, 3.09437534e+00, -2.16658125e-03, 2.75046954e+00, 8.71768377e-01, -2.33004375e+00, -8.64465990e-03, 2.06668848e+00, 5.57575505e-01])] . Pi chart . labels = &#39;python&#39;,&#39;c++&#39;, &#39;ruby&#39;, &#39;java&#39; sizes = [215,130,245,210] colors = [&#39;gold&#39;, &#39;yellowgreen&#39;,&#39;lightcoral&#39;, &#39;lightskyblue&#39;] explode = (0.1,0,0,0) #explode 1st slice #plot plt.pie(sizes,explode=explode,labels=labels,colors=colors, autopct=&#39;%1.1f%%&#39;,shadow=True) plt.axis(&#39;equal&#39;) plt.show() .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/23/Matplotlib.html",
            "relUrl": "/2021/04/23/Matplotlib.html",
            "date": " • Apr 23, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Seaborn || sns",
            "content": "Distribution plots . distplot, joinplot, pairplot . import seaborn as sns import numpy as np . df = sns.load_dataset(&quot;tips&quot;) . df.head() # tip is dependent feature # others are independent features . total_bill tip sex smoker day time size . 0 16.99 | 1.01 | Female | No | Sun | Dinner | 2 | . 1 10.34 | 1.66 | Male | No | Sun | Dinner | 3 | . 2 21.01 | 3.50 | Male | No | Sun | Dinner | 3 | . 3 23.68 | 3.31 | Male | No | Sun | Dinner | 2 | . 4 24.59 | 3.61 | Female | No | Sun | Dinner | 4 | . df.dtypes . total_bill float64 tip float64 sex category smoker category day category time category size int64 dtype: object . Correlation with Heatmap . df.corr() # correlarion can only be found out if values are floating point or integers # corr values range b/w -1 to +1 . total_bill tip size . total_bill 1.000000 | 0.675734 | 0.598315 | . tip 0.675734 | 1.000000 | 0.489299 | . size 0.598315 | 0.489299 | 1.000000 | . Observations :- 1) +ve corr -&gt;&gt; Total bill inc then tip will also inc . sns.heatmap(df.corr()) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d218d27108&gt; . JointPlot . Univariate analysis . sns.jointplot(x=&#39;tip&#39;,y=&#39;total_bill&#39;,data=df,kind=&#39;hex&#39;) # hex=hexagonal shape . &lt;seaborn.axisgrid.JointGrid at 0x2d219541988&gt; . sns.jointplot(x=&#39;tip&#39;,y=&#39;total_bill&#39;,data=df,kind=&#39;reg&#39;) # reg gives probablity density line(on graph) and regression line (inside plot) . &lt;seaborn.axisgrid.JointGrid at 0x2d2197b6d88&gt; . Pair plot . same data row is matched with another variable&#39;s value . sns.pairplot(df, hue=&#39;sex&#39;) . &lt;seaborn.axisgrid.PairGrid at 0x2d219f05bc8&gt; . Dist Plot . sns.distplot(df[&#39;tip&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21a51bcc8&gt; . sns.distplot(df[&#39;tip&#39;],kde =False,bins=10) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21a657dc8&gt; . Categorical Plots . Count Plot . sns.countplot(&#39;sex&#39;,data=df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21a6d2688&gt; . Bar Plot . sns.barplot(x=&#39;total_bill&#39;,y=&#39;sex&#39;,data=df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21b8f2788&gt; . Box Plot . sns.boxplot(&#39;sex&#39;, &#39;total_bill&#39;, data=df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21b950348&gt; . sns.boxplot(x=&#39;day&#39;, y=&#39;total_bill&#39;, data=df, palette=&#39;rainbow&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21b9b9a48&gt; . sns.boxplot(data=df, orient=&#39;v&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21baf1708&gt; . sns.boxplot(x=&#39;total_bill&#39;, y=&#39;day&#39;, hue=&#39;smoker&#39;, data=df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21bb73288&gt; . Violin Plot . sns.violinplot(x=&quot;total_bill&quot;,y=&#39;day&#39;,data=df, palette=&#39;rainbow&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d21bc73488&gt; .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/22/Seaborn.html",
            "relUrl": "/2021/04/22/Seaborn.html",
            "date": " • Apr 22, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Pyforest - Import all Python Data Science Libraries",
            "content": "pip install Pyforest . Collecting Pyforest Downloading pyforest-1.0.3.tar.gz (14 kB) Building wheels for collected packages: Pyforest Building wheel for Pyforest (setup.py): started Building wheel for Pyforest (setup.py): finished with status &#39;done&#39; Created wheel for Pyforest: filename=pyforest-1.0.3-py2.py3-none-any.whl size=13720 sha256=18e08121d5ee96f79c928bf37f744f0c937b1253580c5189dc7f68057ca46f2c Stored in directory: c: users mrsid appdata local pip cache wheels 72 b6 6c b593d021f7e83f481c5208bc23df0084bcfbeb5b141352b882 Successfully built Pyforest Installing collected packages: Pyforest Successfully installed Pyforest-1.0.3 Note: you may need to restart the kernel to use updated packages. . df = pd.read_csv(&#39;http://winterolympicsmedals.com/medals.csv&#39;) . df.head() . Year City Sport Discipline NOC Event Event gender Medal . 0 1924 | Chamonix | Skating | Figure skating | AUT | individual | M | Silver | . 1 1924 | Chamonix | Skating | Figure skating | AUT | individual | W | Gold | . 2 1924 | Chamonix | Skating | Figure skating | AUT | pairs | X | Gold | . 3 1924 | Chamonix | Bobsleigh | Bobsleigh | BEL | four-man | M | Bronze | . 4 1924 | Chamonix | Ice Hockey | Ice Hockey | CAN | ice hockey | M | Gold | . active_imports() # It imports only those libraries that are in use . import pandas as pd . [&#39;import pandas as pd&#39;] . lst1 = [1,2,3,4,5] lst2 = [6,7,8,9,10] plt.plot(lst1,lst2) plt.xlabel(&quot;X-axis&quot;) plt.ylabel(&quot;Y-axis&quot;) plt.show() . np.array([1,2,3,4,5]) . array([1, 2, 3, 4, 5]) . active_imports() . import matplotlib.pyplot as plt import pandas as pd import numpy as np . [&#39;import matplotlib.pyplot as plt&#39;, &#39;import pandas as pd&#39;, &#39;import numpy as np&#39;] . df1= pd.read_csv(&quot;C: Users mrsid Desktop 30 days of ML challenge NumPy and Pandas mercedesbenz.csv&quot;) . df1.head() . ID y X0 X1 X2 X3 X4 X5 X6 X8 ... X375 X376 X377 X378 X379 X380 X382 X383 X384 X385 . 0 0 | 130.81 | k | v | at | a | d | u | j | o | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 6 | 88.53 | k | t | av | e | d | y | l | o | ... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 7 | 76.26 | az | w | n | c | d | x | j | x | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 3 9 | 80.62 | az | t | n | f | d | x | l | e | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 13 | 78.02 | az | v | n | f | d | h | d | n | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 378 columns . sns.distplot(df1[&#39;y&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x27bb681d3c8&gt; . active_imports() . import matplotlib.pyplot as plt import seaborn as sns import pandas as pd import numpy as np . [&#39;import matplotlib.pyplot as plt&#39;, &#39;import seaborn as sns&#39;, &#39;import pandas as pd&#39;, &#39;import numpy as np&#39;] .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/22/Pyforest.html",
            "relUrl": "/2021/04/22/Pyforest.html",
            "date": " • Apr 22, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Intermediate Python",
            "content": "def even_odd(num): if num%2==0: print(&quot;number is even&quot;) else: print(&quot;number is odd&quot;) . even_odd(24) . number is even . def hello(name, age=29): # name is positional argument and age is keyword argument print(&quot;my name is {} and age is {}&quot;.format(name, age)) . hello(&#39;sid&#39;) . my name is sid and age is 29 . hello(&#39;sid&#39;,20) . my name is sid and age is 20 . def hello(*args, **kwargs): print(args) print(kwargs) . hello(&#39;sid&#39;,&#39;saxena&#39;,age=29,dob=2000) . (&#39;sid&#39;, &#39;saxena&#39;) {&#39;age&#39;: 29, &#39;dob&#39;: 2000} . lst=[&#39;sid&#39;,&#39;saxena&#39;] dict_args={&#39;age&#39;: 20 ,&#39;dob&#39;:2000} . hello(*lst,**dict_args) . (&#39;sid&#39;, &#39;saxena&#39;) {&#39;age&#39;: 20, &#39;dob&#39;: 2000} . lst = [1,2,3,4,5,6,7] def evenoddsum(lst): even_sum=0 odd_sum=0 for i in lst: if i%2==0: even_sum += i else: odd_sum += i return even_sum,odd_sum . evenoddsum(lst) . (12, 16) . Lambda functions . def addition(a,b): return a+b # Single expression can only be converted . addition(4,5) . 9 . addition = lambda a,b:a+b . addition(5,6) . 11 . def even(num): if num%2==0: return True . even(24) . True . even1 = lambda num:num%2==0 . even1(12) . True . def add(x,y,z): return x+y+z . add(1,2,3) . 6 . three_add = lambda x,y,z:x+y+z . three_add(1,2,3) . 6 . Map Function . def even_odd(num): if num%2==0: return True else: return False . even_odd(23) . False . lst=[1,2,3,4,5,6,7,8] # apply same function on multiple values . map(even_odd,lst) # in order to instantiate convert it into a list ## memory is not intialised yet . &lt;map at 0x2a398c7e248&gt; . list(map(even_odd,lst)) . [False, True, False, True, False, True, False, True] . list(map(lambda num:num%2==0,lst)) . [False, True, False, True, False, True, False] . Filter function . def even(num): if num%2==0: return True . lst=[1,2,3,4,5,6,7] . list(filter(even,lst)) # return elements which satisfy the condition . [2, 4, 6] . list(filter(lambda num:num%2==0,lst)) . [2, 4, 6] . List Comprehension . provide a concise way to create lists, It consists of braces containing an expression followed by for clause, then zero or more for or if clauses . lst1=[] def lst_square(lst): for i in lst: lst1.append(i*i) return lst1 . lst_square([1,2,3,4,5,6,7]) . [1, 4, 9, 16, 25, 36, 49] . lst=[1,2,3,4,5,6,7] #list comprehension [i*i for i in lst ] . [1, 4, 9, 16, 25, 36, 49] . list1=[i*i for i in lst ] print(list1) . [1, 4, 9, 16, 25, 36, 49] . [i*i for i in lst if i%2==0] . [4, 16, 36] . String Formatting . print(&quot;hello&quot;) . hello . str=&quot;hello&quot; print(str) . hello . def greetings(name): return &quot;hello {}&quot;.format(name) . greetings(&#39;sid&#39;) . &#39;hello sid&#39; . def welcome_email(firstname,lastname): return &quot;welcome {}. is your last name is {}&quot;.format(firstname,lastname) # order can not be altered . welcome_email(&#39;sid&#39;,&#39;saxena&#39;) . &#39;welcome sid. is your last name is saxena&#39; . def welcome_email(name,age): return &quot;welcome {name}. is your age is {age}&quot;.format(age=age,name=name) # now ordering can alter . welcome_email(&#39;sid&#39;,20) . &#39;welcome sid. is your age is 20&#39; . def welcome_email(name,age): return &quot;welcome {name1}. is your age is {age1}&quot;.format(age1=age,name1=name) . welcome_email(&#39;sid&#39;,20) . &#39;welcome sid. is your age is 20&#39; . List Iterables vs Iterators . lst = [1,2,3,4,5,6,7] # this whole list is getting initialised in the memory for i in lst: print(i) . 1 2 3 4 5 6 7 . list1=iter(lst) #but in case of iterators whole listdose not get stored in memory it will get accessed only via next . list1 . &lt;list_iterator at 0x2a3996beb08&gt; . next(list1) . 1 . next(list1) . 2 . for i in lst1: print(i) . 1 4 9 16 25 36 49 . .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/21/Python-Intermediate.html",
            "relUrl": "/2021/04/21/Python-Intermediate.html",
            "date": " • Apr 21, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "pandas read operations",
            "content": "Pandas ia an open source, BSD-licensed library providing high performance, easy to use data structures and data analysis tools for the python . import pandas as pd import numpy as np . df = pd.DataFrame(np.arange(0,20).reshape(5,4),index=[&#39;row1&#39;,&#39;row2&#39;,&#39;row3&#39;,&#39;row4&#39;,&#39;row5&#39;],columns=[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;,&#39;col4&#39;]) . df . col1 col2 col3 col4 . row1 0 | 1 | 2 | 3 | . row2 4 | 5 | 6 | 7 | . row3 8 | 9 | 10 | 11 | . row4 12 | 13 | 14 | 15 | . row5 16 | 17 | 18 | 19 | . df.to_csv(&#39;pandas1.csv&#39;) . # m1--&gt; .loc m2--&gt; .iloc(index location) df.loc[&#39;row1&#39;] . col1 0 col2 1 col3 2 col4 3 Name: row1, dtype: int32 . type(df.loc[&#39;row1&#39;]) . pandas.core.series.Series . df.iloc[:,:] #--&gt; [rowindex, column index] . col1 col2 col3 col4 . row1 0 | 1 | 2 | 3 | . row2 4 | 5 | 6 | 7 | . row3 8 | 9 | 10 | 11 | . row4 12 | 13 | 14 | 15 | . row5 16 | 17 | 18 | 19 | . df.iloc[0:3,0:2] . col1 col2 . row1 0 | 1 | . row2 4 | 5 | . row3 8 | 9 | . type(df.iloc[:,:]) . pandas.core.frame.DataFrame . df.iloc[:,:].values . array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19]]) . df.isnull().sum() . col1 0 col2 0 col3 0 col4 0 dtype: int64 . df[&#39;col1&#39;].value_counts() # how many unique categories . 12 1 4 1 16 1 8 1 0 1 Name: col1, dtype: int64 . df[&#39;col1&#39;].unique . &lt;bound method Series.unique of row1 0 row2 4 row3 8 row4 12 row5 16 Name: col1, dtype: int32&gt; . import pandas as pd . df=pd.read_csv(&#39;mercedesbenz.csv&#39;) print(df.shape) . (4209, 378) . df.head() # top 5 rows . ID y X0 X1 X2 X3 X4 X5 X6 X8 ... X375 X376 X377 X378 X379 X380 X382 X383 X384 X385 . 0 0 | 130.81 | k | v | at | a | d | u | j | o | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 6 | 88.53 | k | t | av | e | d | y | l | o | ... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 7 | 76.26 | az | w | n | c | d | x | j | x | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 3 9 | 80.62 | az | t | n | f | d | x | l | e | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 13 | 78.02 | az | v | n | f | d | h | d | n | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 378 columns . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 4209 entries, 0 to 4208 Columns: 378 entries, ID to X385 dtypes: float64(1), int64(369), object(8) memory usage: 12.1+ MB . df.describe() #only int and float cols will be taken into consideration . ID y X10 X11 X12 X13 X14 X15 X16 X17 ... X375 X376 X377 X378 X379 X380 X382 X383 X384 X385 . count 4209.000000 | 4209.000000 | 4209.000000 | 4209.0 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | ... | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | 4209.000000 | . mean 4205.960798 | 100.669318 | 0.013305 | 0.0 | 0.075077 | 0.057971 | 0.428130 | 0.000475 | 0.002613 | 0.007603 | ... | 0.318841 | 0.057258 | 0.314802 | 0.020670 | 0.009503 | 0.008078 | 0.007603 | 0.001663 | 0.000475 | 0.001426 | . std 2437.608688 | 12.679381 | 0.114590 | 0.0 | 0.263547 | 0.233716 | 0.494867 | 0.021796 | 0.051061 | 0.086872 | ... | 0.466082 | 0.232363 | 0.464492 | 0.142294 | 0.097033 | 0.089524 | 0.086872 | 0.040752 | 0.021796 | 0.037734 | . min 0.000000 | 72.110000 | 0.000000 | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 2095.000000 | 90.820000 | 0.000000 | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 50% 4220.000000 | 99.150000 | 0.000000 | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 75% 6314.000000 | 109.010000 | 0.000000 | 0.0 | 0.000000 | 0.000000 | 1.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 1.000000 | 0.000000 | 1.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . max 8417.000000 | 265.320000 | 1.000000 | 0.0 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | ... | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | . 8 rows × 370 columns . df[&#39;X0&#39;].value_counts().head() . z 360 ak 349 y 324 ay 313 t 306 Name: X0, dtype: int64 . df[df[&#39;y&#39;]&gt;100] . ID y X0 X1 X2 X3 X4 X5 X6 X8 ... X375 X376 X377 X378 X379 X380 X382 X383 X384 X385 . 0 0 | 130.81 | k | v | at | a | d | u | j | o | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 6 24 | 128.76 | al | r | e | f | d | f | h | s | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 8 27 | 108.67 | w | s | as | e | d | f | i | h | ... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 9 30 | 126.99 | j | b | aq | c | d | f | a | e | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 10 31 | 102.09 | h | r | r | f | d | f | h | p | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4202 8402 | 123.34 | ap | l | s | c | d | aa | d | r | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4204 8405 | 107.39 | ak | s | as | c | d | aa | d | q | ... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4205 8406 | 108.77 | j | o | t | d | d | aa | h | h | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4206 8412 | 109.22 | ak | v | r | a | d | aa | g | e | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4208 8417 | 110.85 | z | r | ae | c | d | aa | g | w | ... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2004 rows × 378 columns . CSV . from io import StringIO,BytesIO . data=(&#39;col1,col2,col3 n&#39; &#39;x,y,1 n&#39; &#39;a,b,2 n&#39; &#39;c,d,3 n&#39;) . type(data) . str . StringIO() # shift+tab . &lt;_io.StringIO at 0x2553ca08af8&gt; . pd.read_csv(StringIO(data)) . col1 col2 col3 . 0 x | y | 1 | . 1 a | b | 2 | . 2 c | d | 3 | . df = pd.read_csv(StringIO(data), usecols= [&#39;col1&#39;, &#39;col3&#39;]) # read from specific columns . df . col1 col3 . 0 x | 1 | . 1 a | 2 | . 2 c | 3 | . df.to_csv(&quot;Test.csv&quot;) . #df = pd.read_csv(StringIO(data), usecols=lambda x: x.upper() in [&#39;col1&#39;, &#39;col3&#39;]) . df . col1 col3 . 0 x | 1 | . 1 a | 2 | . 2 c | 3 | . data=(&#39;a,b,c,d n&#39; &#39;1,2,3,4 n&#39; &#39;5,6,7,8 n&#39; &#39;9,10,11,12&#39;) . print(data) . a,b,c,d 1,2,3,4 5,6,7,8 9,10,11,12 . df=pd.read_csv(StringIO(data),dtype=object) . df . a b c d . 0 1 | 2 | 3 | 4 | . 1 5 | 6 | 7 | 8 | . 2 9 | 10 | 11 | 12 | . df[&#39;a&#39;][1] . &#39;5&#39; . df=pd.read_csv(StringIO(data),dtype=int) . df . a b c d . 0 1 | 2 | 3 | 4 | . 1 5 | 6 | 7 | 8 | . 2 9 | 10 | 11 | 12 | . df=pd.read_csv(StringIO(data),dtype={&#39;b&#39;:int,&#39;c&#39;:float,&#39;a&#39;:&#39;Int64&#39;}) . df . a b c d . 0 1 | 2 | 3.0 | 4 | . 1 5 | 6 | 7.0 | 8 | . 2 9 | 10 | 11.0 | 12 | . df[&#39;c&#39;][2] . 11.0 . data = (&#39;index,a,b,c n&#39; &#39;4,apple,bat,5.7 n&#39; &#39;8,orange,cow,10&#39;) . pd.read_csv(StringIO(data)) . index a b c . 0 4 | apple | bat | 5.7 | . 1 8 | orange | cow | 10.0 | . pd.read_csv(StringIO(data),index_col=0) . a b c . index . 4 apple | bat | 5.7 | . 8 orange | cow | 10.0 | . data = (&#39;a,b,c n&#39; &#39;4,apple,bat n&#39; &#39;8,orange,cow&#39;) . pd.read_csv(StringIO(data)) . a b c . 0 4 | apple | bat | . 1 8 | orange | cow | . pd.read_csv(StringIO(data),index_col=False) . a b c . 0 4 | apple | bat | . 1 8 | orange | cow | . data = (&#39;a,b,c n&#39; &#39;4,apple,bat, n&#39; #one comma makes difference &#39;8,orange,cow,&#39;) . print(data) . a,b,c 4,apple,bat, 8,orange,cow, . pd.read_csv(StringIO(data)) . a b c . 4 apple | bat | NaN | . 8 orange | cow | NaN | . pd.read_csv(StringIO(data), usecols=[&#39;b&#39;,&#39;c&#39;],index_col=False) . b c . 0 apple | bat | . 1 orange | cow | . Quoting and escape characters are very useful in NLP . data = &#39;a,b n&quot;hello, &quot;Bob &quot;,nice to see you&quot;,5&#39; . pd.read_csv(StringIO(data),escapechar=&#39; &#39;) . a b . 0 hello, &quot;Bob&quot;,nice to see you | 5 | . df=pd.read_csv(&#39;https://download.bls.gov/pub/time.series/cu/cu.item&#39;, sep=&#39; t&#39;) . df . item_code item_name display_level selectable sort_sequence . 0 AA0 | All items - old base | 0 | T | 2 | . 1 AA0R | Purchasing power of the consumer dollar - old ... | 0 | T | 399 | . 2 SA0 | All items | 0 | T | 1 | . 3 SA0E | Energy | 1 | T | 374 | . 4 SA0L1 | All items less food | 1 | T | 358 | . ... ... | ... | ... | ... | ... | . 394 SS68023 | Tax return preparation and other accounting fees | 4 | T | 352 | . 395 SSEA011 | College textbooks | 3 | T | 314 | . 396 SSFV031A | Food at elementary and secondary schools | 3 | T | 122 | . 397 SSGE013 | Infants&#39; equipment | 3 | T | 355 | . 398 SSHJ031 | Infants&#39; furniture | 3 | T | 165 | . 399 rows × 5 columns . Reading JSON,Reading HTML, Read PICKLE, Read EXCEL Files . Data = &#39;{&quot;employee_name&quot;: &quot;James&quot;, &quot;email&quot;: &quot;james@gmail.com&quot;, &quot;job_profile&quot;: [{&quot;title1&quot;:&quot;Team Lead&quot;, &quot;title2&quot;:&quot;Sr. Developer&quot;}]}&#39; df1=pd.read_json(Data) . df=pd.read_csv(&#39;https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data&#39;, header=None) . df.head() . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 . 0 1 | 14.23 | 1.71 | 2.43 | 15.6 | 127 | 2.80 | 3.06 | 0.28 | 2.29 | 5.64 | 1.04 | 3.92 | 1065 | . 1 1 | 13.20 | 1.78 | 2.14 | 11.2 | 100 | 2.65 | 2.76 | 0.26 | 1.28 | 4.38 | 1.05 | 3.40 | 1050 | . 2 1 | 13.16 | 2.36 | 2.67 | 18.6 | 101 | 2.80 | 3.24 | 0.30 | 2.81 | 5.68 | 1.03 | 3.17 | 1185 | . 3 1 | 14.37 | 1.95 | 2.50 | 16.8 | 113 | 3.85 | 3.49 | 0.24 | 2.18 | 7.80 | 0.86 | 3.45 | 1480 | . 4 1 | 13.24 | 2.59 | 2.87 | 21.0 | 118 | 2.80 | 2.69 | 0.39 | 1.82 | 4.32 | 1.04 | 2.93 | 735 | . df.to_csv(&#39;wine.csv&#39;) . df1 . employee_name email job_profile . 0 James | james@gmail.com | {&#39;title1&#39;: &#39;Team Lead&#39;, &#39;title2&#39;: &#39;Sr. Develop... | . df1.to_json(orient=&quot;records&quot;) . &#39;[{&#34;employee_name&#34;:&#34;James&#34;,&#34;email&#34;:&#34;james@gmail.com&#34;,&#34;job_profile&#34;:{&#34;title1&#34;:&#34;Team Lead&#34;,&#34;title2&#34;:&#34;Sr. Developer&#34;}}]&#39; . df.to_json(orient=&quot;records&quot;) . &#39;[{&#34;0&#34;:1,&#34;1&#34;:14.23,&#34;2&#34;:1.71,&#34;3&#34;:2.43,&#34;4&#34;:15.6,&#34;5&#34;:127,&#34;6&#34;:2.8,&#34;7&#34;:3.06,&#34;8&#34;:0.28,&#34;9&#34;:2.29,&#34;10&#34;:5.64,&#34;11&#34;:1.04,&#34;12&#34;:3.92,&#34;13&#34;:1065},{&#34;0&#34;:1,&#34;1&#34;:13.2,&#34;2&#34;:1.78,&#34;3&#34;:2.14,&#34;4&#34;:11.2,&#34;5&#34;:100,&#34;6&#34;:2.65,&#34;7&#34;:2.76,&#34;8&#34;:0.26,&#34;9&#34;:1.28,&#34;10&#34;:4.38,&#34;11&#34;:1.05,&#34;12&#34;:3.4,&#34;13&#34;:1050},{&#34;0&#34;:1,&#34;1&#34;:13.16,&#34;2&#34;:2.36,&#34;3&#34;:2.67,&#34;4&#34;:18.6,&#34;5&#34;:101,&#34;6&#34;:2.8,&#34;7&#34;:3.24,&#34;8&#34;:0.3,&#34;9&#34;:2.81,&#34;10&#34;:5.68,&#34;11&#34;:1.03,&#34;12&#34;:3.17,&#34;13&#34;:1185},{&#34;0&#34;:1,&#34;1&#34;:14.37,&#34;2&#34;:1.95,&#34;3&#34;:2.5,&#34;4&#34;:16.8,&#34;5&#34;:113,&#34;6&#34;:3.85,&#34;7&#34;:3.49,&#34;8&#34;:0.24,&#34;9&#34;:2.18,&#34;10&#34;:7.8,&#34;11&#34;:0.86,&#34;12&#34;:3.45,&#34;13&#34;:1480},{&#34;0&#34;:1,&#34;1&#34;:13.24,&#34;2&#34;:2.59,&#34;3&#34;:2.87,&#34;4&#34;:21.0,&#34;5&#34;:118,&#34;6&#34;:2.8,&#34;7&#34;:2.69,&#34;8&#34;:0.39,&#34;9&#34;:1.82,&#34;10&#34;:4.32,&#34;11&#34;:1.04,&#34;12&#34;:2.93,&#34;13&#34;:735},{&#34;0&#34;:1,&#34;1&#34;:14.2,&#34;2&#34;:1.76,&#34;3&#34;:2.45,&#34;4&#34;:15.2,&#34;5&#34;:112,&#34;6&#34;:3.27,&#34;7&#34;:3.39,&#34;8&#34;:0.34,&#34;9&#34;:1.97,&#34;10&#34;:6.75,&#34;11&#34;:1.05,&#34;12&#34;:2.85,&#34;13&#34;:1450},{&#34;0&#34;:1,&#34;1&#34;:14.39,&#34;2&#34;:1.87,&#34;3&#34;:2.45,&#34;4&#34;:14.6,&#34;5&#34;:96,&#34;6&#34;:2.5,&#34;7&#34;:2.52,&#34;8&#34;:0.3,&#34;9&#34;:1.98,&#34;10&#34;:5.25,&#34;11&#34;:1.02,&#34;12&#34;:3.58,&#34;13&#34;:1290},{&#34;0&#34;:1,&#34;1&#34;:14.06,&#34;2&#34;:2.15,&#34;3&#34;:2.61,&#34;4&#34;:17.6,&#34;5&#34;:121,&#34;6&#34;:2.6,&#34;7&#34;:2.51,&#34;8&#34;:0.31,&#34;9&#34;:1.25,&#34;10&#34;:5.05,&#34;11&#34;:1.06,&#34;12&#34;:3.58,&#34;13&#34;:1295},{&#34;0&#34;:1,&#34;1&#34;:14.83,&#34;2&#34;:1.64,&#34;3&#34;:2.17,&#34;4&#34;:14.0,&#34;5&#34;:97,&#34;6&#34;:2.8,&#34;7&#34;:2.98,&#34;8&#34;:0.29,&#34;9&#34;:1.98,&#34;10&#34;:5.2,&#34;11&#34;:1.08,&#34;12&#34;:2.85,&#34;13&#34;:1045},{&#34;0&#34;:1,&#34;1&#34;:13.86,&#34;2&#34;:1.35,&#34;3&#34;:2.27,&#34;4&#34;:16.0,&#34;5&#34;:98,&#34;6&#34;:2.98,&#34;7&#34;:3.15,&#34;8&#34;:0.22,&#34;9&#34;:1.85,&#34;10&#34;:7.22,&#34;11&#34;:1.01,&#34;12&#34;:3.55,&#34;13&#34;:1045},{&#34;0&#34;:1,&#34;1&#34;:14.1,&#34;2&#34;:2.16,&#34;3&#34;:2.3,&#34;4&#34;:18.0,&#34;5&#34;:105,&#34;6&#34;:2.95,&#34;7&#34;:3.32,&#34;8&#34;:0.22,&#34;9&#34;:2.38,&#34;10&#34;:5.75,&#34;11&#34;:1.25,&#34;12&#34;:3.17,&#34;13&#34;:1510},{&#34;0&#34;:1,&#34;1&#34;:14.12,&#34;2&#34;:1.48,&#34;3&#34;:2.32,&#34;4&#34;:16.8,&#34;5&#34;:95,&#34;6&#34;:2.2,&#34;7&#34;:2.43,&#34;8&#34;:0.26,&#34;9&#34;:1.57,&#34;10&#34;:5.0,&#34;11&#34;:1.17,&#34;12&#34;:2.82,&#34;13&#34;:1280},{&#34;0&#34;:1,&#34;1&#34;:13.75,&#34;2&#34;:1.73,&#34;3&#34;:2.41,&#34;4&#34;:16.0,&#34;5&#34;:89,&#34;6&#34;:2.6,&#34;7&#34;:2.76,&#34;8&#34;:0.29,&#34;9&#34;:1.81,&#34;10&#34;:5.6,&#34;11&#34;:1.15,&#34;12&#34;:2.9,&#34;13&#34;:1320},{&#34;0&#34;:1,&#34;1&#34;:14.75,&#34;2&#34;:1.73,&#34;3&#34;:2.39,&#34;4&#34;:11.4,&#34;5&#34;:91,&#34;6&#34;:3.1,&#34;7&#34;:3.69,&#34;8&#34;:0.43,&#34;9&#34;:2.81,&#34;10&#34;:5.4,&#34;11&#34;:1.25,&#34;12&#34;:2.73,&#34;13&#34;:1150},{&#34;0&#34;:1,&#34;1&#34;:14.38,&#34;2&#34;:1.87,&#34;3&#34;:2.38,&#34;4&#34;:12.0,&#34;5&#34;:102,&#34;6&#34;:3.3,&#34;7&#34;:3.64,&#34;8&#34;:0.29,&#34;9&#34;:2.96,&#34;10&#34;:7.5,&#34;11&#34;:1.2,&#34;12&#34;:3.0,&#34;13&#34;:1547},{&#34;0&#34;:1,&#34;1&#34;:13.63,&#34;2&#34;:1.81,&#34;3&#34;:2.7,&#34;4&#34;:17.2,&#34;5&#34;:112,&#34;6&#34;:2.85,&#34;7&#34;:2.91,&#34;8&#34;:0.3,&#34;9&#34;:1.46,&#34;10&#34;:7.3,&#34;11&#34;:1.28,&#34;12&#34;:2.88,&#34;13&#34;:1310},{&#34;0&#34;:1,&#34;1&#34;:14.3,&#34;2&#34;:1.92,&#34;3&#34;:2.72,&#34;4&#34;:20.0,&#34;5&#34;:120,&#34;6&#34;:2.8,&#34;7&#34;:3.14,&#34;8&#34;:0.33,&#34;9&#34;:1.97,&#34;10&#34;:6.2,&#34;11&#34;:1.07,&#34;12&#34;:2.65,&#34;13&#34;:1280},{&#34;0&#34;:1,&#34;1&#34;:13.83,&#34;2&#34;:1.57,&#34;3&#34;:2.62,&#34;4&#34;:20.0,&#34;5&#34;:115,&#34;6&#34;:2.95,&#34;7&#34;:3.4,&#34;8&#34;:0.4,&#34;9&#34;:1.72,&#34;10&#34;:6.6,&#34;11&#34;:1.13,&#34;12&#34;:2.57,&#34;13&#34;:1130},{&#34;0&#34;:1,&#34;1&#34;:14.19,&#34;2&#34;:1.59,&#34;3&#34;:2.48,&#34;4&#34;:16.5,&#34;5&#34;:108,&#34;6&#34;:3.3,&#34;7&#34;:3.93,&#34;8&#34;:0.32,&#34;9&#34;:1.86,&#34;10&#34;:8.7,&#34;11&#34;:1.23,&#34;12&#34;:2.82,&#34;13&#34;:1680},{&#34;0&#34;:1,&#34;1&#34;:13.64,&#34;2&#34;:3.1,&#34;3&#34;:2.56,&#34;4&#34;:15.2,&#34;5&#34;:116,&#34;6&#34;:2.7,&#34;7&#34;:3.03,&#34;8&#34;:0.17,&#34;9&#34;:1.66,&#34;10&#34;:5.1,&#34;11&#34;:0.96,&#34;12&#34;:3.36,&#34;13&#34;:845},{&#34;0&#34;:1,&#34;1&#34;:14.06,&#34;2&#34;:1.63,&#34;3&#34;:2.28,&#34;4&#34;:16.0,&#34;5&#34;:126,&#34;6&#34;:3.0,&#34;7&#34;:3.17,&#34;8&#34;:0.24,&#34;9&#34;:2.1,&#34;10&#34;:5.65,&#34;11&#34;:1.09,&#34;12&#34;:3.71,&#34;13&#34;:780},{&#34;0&#34;:1,&#34;1&#34;:12.93,&#34;2&#34;:3.8,&#34;3&#34;:2.65,&#34;4&#34;:18.6,&#34;5&#34;:102,&#34;6&#34;:2.41,&#34;7&#34;:2.41,&#34;8&#34;:0.25,&#34;9&#34;:1.98,&#34;10&#34;:4.5,&#34;11&#34;:1.03,&#34;12&#34;:3.52,&#34;13&#34;:770},{&#34;0&#34;:1,&#34;1&#34;:13.71,&#34;2&#34;:1.86,&#34;3&#34;:2.36,&#34;4&#34;:16.6,&#34;5&#34;:101,&#34;6&#34;:2.61,&#34;7&#34;:2.88,&#34;8&#34;:0.27,&#34;9&#34;:1.69,&#34;10&#34;:3.8,&#34;11&#34;:1.11,&#34;12&#34;:4.0,&#34;13&#34;:1035},{&#34;0&#34;:1,&#34;1&#34;:12.85,&#34;2&#34;:1.6,&#34;3&#34;:2.52,&#34;4&#34;:17.8,&#34;5&#34;:95,&#34;6&#34;:2.48,&#34;7&#34;:2.37,&#34;8&#34;:0.26,&#34;9&#34;:1.46,&#34;10&#34;:3.93,&#34;11&#34;:1.09,&#34;12&#34;:3.63,&#34;13&#34;:1015},{&#34;0&#34;:1,&#34;1&#34;:13.5,&#34;2&#34;:1.81,&#34;3&#34;:2.61,&#34;4&#34;:20.0,&#34;5&#34;:96,&#34;6&#34;:2.53,&#34;7&#34;:2.61,&#34;8&#34;:0.28,&#34;9&#34;:1.66,&#34;10&#34;:3.52,&#34;11&#34;:1.12,&#34;12&#34;:3.82,&#34;13&#34;:845},{&#34;0&#34;:1,&#34;1&#34;:13.05,&#34;2&#34;:2.05,&#34;3&#34;:3.22,&#34;4&#34;:25.0,&#34;5&#34;:124,&#34;6&#34;:2.63,&#34;7&#34;:2.68,&#34;8&#34;:0.47,&#34;9&#34;:1.92,&#34;10&#34;:3.58,&#34;11&#34;:1.13,&#34;12&#34;:3.2,&#34;13&#34;:830},{&#34;0&#34;:1,&#34;1&#34;:13.39,&#34;2&#34;:1.77,&#34;3&#34;:2.62,&#34;4&#34;:16.1,&#34;5&#34;:93,&#34;6&#34;:2.85,&#34;7&#34;:2.94,&#34;8&#34;:0.34,&#34;9&#34;:1.45,&#34;10&#34;:4.8,&#34;11&#34;:0.92,&#34;12&#34;:3.22,&#34;13&#34;:1195},{&#34;0&#34;:1,&#34;1&#34;:13.3,&#34;2&#34;:1.72,&#34;3&#34;:2.14,&#34;4&#34;:17.0,&#34;5&#34;:94,&#34;6&#34;:2.4,&#34;7&#34;:2.19,&#34;8&#34;:0.27,&#34;9&#34;:1.35,&#34;10&#34;:3.95,&#34;11&#34;:1.02,&#34;12&#34;:2.77,&#34;13&#34;:1285},{&#34;0&#34;:1,&#34;1&#34;:13.87,&#34;2&#34;:1.9,&#34;3&#34;:2.8,&#34;4&#34;:19.4,&#34;5&#34;:107,&#34;6&#34;:2.95,&#34;7&#34;:2.97,&#34;8&#34;:0.37,&#34;9&#34;:1.76,&#34;10&#34;:4.5,&#34;11&#34;:1.25,&#34;12&#34;:3.4,&#34;13&#34;:915},{&#34;0&#34;:1,&#34;1&#34;:14.02,&#34;2&#34;:1.68,&#34;3&#34;:2.21,&#34;4&#34;:16.0,&#34;5&#34;:96,&#34;6&#34;:2.65,&#34;7&#34;:2.33,&#34;8&#34;:0.26,&#34;9&#34;:1.98,&#34;10&#34;:4.7,&#34;11&#34;:1.04,&#34;12&#34;:3.59,&#34;13&#34;:1035},{&#34;0&#34;:1,&#34;1&#34;:13.73,&#34;2&#34;:1.5,&#34;3&#34;:2.7,&#34;4&#34;:22.5,&#34;5&#34;:101,&#34;6&#34;:3.0,&#34;7&#34;:3.25,&#34;8&#34;:0.29,&#34;9&#34;:2.38,&#34;10&#34;:5.7,&#34;11&#34;:1.19,&#34;12&#34;:2.71,&#34;13&#34;:1285},{&#34;0&#34;:1,&#34;1&#34;:13.58,&#34;2&#34;:1.66,&#34;3&#34;:2.36,&#34;4&#34;:19.1,&#34;5&#34;:106,&#34;6&#34;:2.86,&#34;7&#34;:3.19,&#34;8&#34;:0.22,&#34;9&#34;:1.95,&#34;10&#34;:6.9,&#34;11&#34;:1.09,&#34;12&#34;:2.88,&#34;13&#34;:1515},{&#34;0&#34;:1,&#34;1&#34;:13.68,&#34;2&#34;:1.83,&#34;3&#34;:2.36,&#34;4&#34;:17.2,&#34;5&#34;:104,&#34;6&#34;:2.42,&#34;7&#34;:2.69,&#34;8&#34;:0.42,&#34;9&#34;:1.97,&#34;10&#34;:3.84,&#34;11&#34;:1.23,&#34;12&#34;:2.87,&#34;13&#34;:990},{&#34;0&#34;:1,&#34;1&#34;:13.76,&#34;2&#34;:1.53,&#34;3&#34;:2.7,&#34;4&#34;:19.5,&#34;5&#34;:132,&#34;6&#34;:2.95,&#34;7&#34;:2.74,&#34;8&#34;:0.5,&#34;9&#34;:1.35,&#34;10&#34;:5.4,&#34;11&#34;:1.25,&#34;12&#34;:3.0,&#34;13&#34;:1235},{&#34;0&#34;:1,&#34;1&#34;:13.51,&#34;2&#34;:1.8,&#34;3&#34;:2.65,&#34;4&#34;:19.0,&#34;5&#34;:110,&#34;6&#34;:2.35,&#34;7&#34;:2.53,&#34;8&#34;:0.29,&#34;9&#34;:1.54,&#34;10&#34;:4.2,&#34;11&#34;:1.1,&#34;12&#34;:2.87,&#34;13&#34;:1095},{&#34;0&#34;:1,&#34;1&#34;:13.48,&#34;2&#34;:1.81,&#34;3&#34;:2.41,&#34;4&#34;:20.5,&#34;5&#34;:100,&#34;6&#34;:2.7,&#34;7&#34;:2.98,&#34;8&#34;:0.26,&#34;9&#34;:1.86,&#34;10&#34;:5.1,&#34;11&#34;:1.04,&#34;12&#34;:3.47,&#34;13&#34;:920},{&#34;0&#34;:1,&#34;1&#34;:13.28,&#34;2&#34;:1.64,&#34;3&#34;:2.84,&#34;4&#34;:15.5,&#34;5&#34;:110,&#34;6&#34;:2.6,&#34;7&#34;:2.68,&#34;8&#34;:0.34,&#34;9&#34;:1.36,&#34;10&#34;:4.6,&#34;11&#34;:1.09,&#34;12&#34;:2.78,&#34;13&#34;:880},{&#34;0&#34;:1,&#34;1&#34;:13.05,&#34;2&#34;:1.65,&#34;3&#34;:2.55,&#34;4&#34;:18.0,&#34;5&#34;:98,&#34;6&#34;:2.45,&#34;7&#34;:2.43,&#34;8&#34;:0.29,&#34;9&#34;:1.44,&#34;10&#34;:4.25,&#34;11&#34;:1.12,&#34;12&#34;:2.51,&#34;13&#34;:1105},{&#34;0&#34;:1,&#34;1&#34;:13.07,&#34;2&#34;:1.5,&#34;3&#34;:2.1,&#34;4&#34;:15.5,&#34;5&#34;:98,&#34;6&#34;:2.4,&#34;7&#34;:2.64,&#34;8&#34;:0.28,&#34;9&#34;:1.37,&#34;10&#34;:3.7,&#34;11&#34;:1.18,&#34;12&#34;:2.69,&#34;13&#34;:1020},{&#34;0&#34;:1,&#34;1&#34;:14.22,&#34;2&#34;:3.99,&#34;3&#34;:2.51,&#34;4&#34;:13.2,&#34;5&#34;:128,&#34;6&#34;:3.0,&#34;7&#34;:3.04,&#34;8&#34;:0.2,&#34;9&#34;:2.08,&#34;10&#34;:5.1,&#34;11&#34;:0.89,&#34;12&#34;:3.53,&#34;13&#34;:760},{&#34;0&#34;:1,&#34;1&#34;:13.56,&#34;2&#34;:1.71,&#34;3&#34;:2.31,&#34;4&#34;:16.2,&#34;5&#34;:117,&#34;6&#34;:3.15,&#34;7&#34;:3.29,&#34;8&#34;:0.34,&#34;9&#34;:2.34,&#34;10&#34;:6.13,&#34;11&#34;:0.95,&#34;12&#34;:3.38,&#34;13&#34;:795},{&#34;0&#34;:1,&#34;1&#34;:13.41,&#34;2&#34;:3.84,&#34;3&#34;:2.12,&#34;4&#34;:18.8,&#34;5&#34;:90,&#34;6&#34;:2.45,&#34;7&#34;:2.68,&#34;8&#34;:0.27,&#34;9&#34;:1.48,&#34;10&#34;:4.28,&#34;11&#34;:0.91,&#34;12&#34;:3.0,&#34;13&#34;:1035},{&#34;0&#34;:1,&#34;1&#34;:13.88,&#34;2&#34;:1.89,&#34;3&#34;:2.59,&#34;4&#34;:15.0,&#34;5&#34;:101,&#34;6&#34;:3.25,&#34;7&#34;:3.56,&#34;8&#34;:0.17,&#34;9&#34;:1.7,&#34;10&#34;:5.43,&#34;11&#34;:0.88,&#34;12&#34;:3.56,&#34;13&#34;:1095},{&#34;0&#34;:1,&#34;1&#34;:13.24,&#34;2&#34;:3.98,&#34;3&#34;:2.29,&#34;4&#34;:17.5,&#34;5&#34;:103,&#34;6&#34;:2.64,&#34;7&#34;:2.63,&#34;8&#34;:0.32,&#34;9&#34;:1.66,&#34;10&#34;:4.36,&#34;11&#34;:0.82,&#34;12&#34;:3.0,&#34;13&#34;:680},{&#34;0&#34;:1,&#34;1&#34;:13.05,&#34;2&#34;:1.77,&#34;3&#34;:2.1,&#34;4&#34;:17.0,&#34;5&#34;:107,&#34;6&#34;:3.0,&#34;7&#34;:3.0,&#34;8&#34;:0.28,&#34;9&#34;:2.03,&#34;10&#34;:5.04,&#34;11&#34;:0.88,&#34;12&#34;:3.35,&#34;13&#34;:885},{&#34;0&#34;:1,&#34;1&#34;:14.21,&#34;2&#34;:4.04,&#34;3&#34;:2.44,&#34;4&#34;:18.9,&#34;5&#34;:111,&#34;6&#34;:2.85,&#34;7&#34;:2.65,&#34;8&#34;:0.3,&#34;9&#34;:1.25,&#34;10&#34;:5.24,&#34;11&#34;:0.87,&#34;12&#34;:3.33,&#34;13&#34;:1080},{&#34;0&#34;:1,&#34;1&#34;:14.38,&#34;2&#34;:3.59,&#34;3&#34;:2.28,&#34;4&#34;:16.0,&#34;5&#34;:102,&#34;6&#34;:3.25,&#34;7&#34;:3.17,&#34;8&#34;:0.27,&#34;9&#34;:2.19,&#34;10&#34;:4.9,&#34;11&#34;:1.04,&#34;12&#34;:3.44,&#34;13&#34;:1065},{&#34;0&#34;:1,&#34;1&#34;:13.9,&#34;2&#34;:1.68,&#34;3&#34;:2.12,&#34;4&#34;:16.0,&#34;5&#34;:101,&#34;6&#34;:3.1,&#34;7&#34;:3.39,&#34;8&#34;:0.21,&#34;9&#34;:2.14,&#34;10&#34;:6.1,&#34;11&#34;:0.91,&#34;12&#34;:3.33,&#34;13&#34;:985},{&#34;0&#34;:1,&#34;1&#34;:14.1,&#34;2&#34;:2.02,&#34;3&#34;:2.4,&#34;4&#34;:18.8,&#34;5&#34;:103,&#34;6&#34;:2.75,&#34;7&#34;:2.92,&#34;8&#34;:0.32,&#34;9&#34;:2.38,&#34;10&#34;:6.2,&#34;11&#34;:1.07,&#34;12&#34;:2.75,&#34;13&#34;:1060},{&#34;0&#34;:1,&#34;1&#34;:13.94,&#34;2&#34;:1.73,&#34;3&#34;:2.27,&#34;4&#34;:17.4,&#34;5&#34;:108,&#34;6&#34;:2.88,&#34;7&#34;:3.54,&#34;8&#34;:0.32,&#34;9&#34;:2.08,&#34;10&#34;:8.9,&#34;11&#34;:1.12,&#34;12&#34;:3.1,&#34;13&#34;:1260},{&#34;0&#34;:1,&#34;1&#34;:13.05,&#34;2&#34;:1.73,&#34;3&#34;:2.04,&#34;4&#34;:12.4,&#34;5&#34;:92,&#34;6&#34;:2.72,&#34;7&#34;:3.27,&#34;8&#34;:0.17,&#34;9&#34;:2.91,&#34;10&#34;:7.2,&#34;11&#34;:1.12,&#34;12&#34;:2.91,&#34;13&#34;:1150},{&#34;0&#34;:1,&#34;1&#34;:13.83,&#34;2&#34;:1.65,&#34;3&#34;:2.6,&#34;4&#34;:17.2,&#34;5&#34;:94,&#34;6&#34;:2.45,&#34;7&#34;:2.99,&#34;8&#34;:0.22,&#34;9&#34;:2.29,&#34;10&#34;:5.6,&#34;11&#34;:1.24,&#34;12&#34;:3.37,&#34;13&#34;:1265},{&#34;0&#34;:1,&#34;1&#34;:13.82,&#34;2&#34;:1.75,&#34;3&#34;:2.42,&#34;4&#34;:14.0,&#34;5&#34;:111,&#34;6&#34;:3.88,&#34;7&#34;:3.74,&#34;8&#34;:0.32,&#34;9&#34;:1.87,&#34;10&#34;:7.05,&#34;11&#34;:1.01,&#34;12&#34;:3.26,&#34;13&#34;:1190},{&#34;0&#34;:1,&#34;1&#34;:13.77,&#34;2&#34;:1.9,&#34;3&#34;:2.68,&#34;4&#34;:17.1,&#34;5&#34;:115,&#34;6&#34;:3.0,&#34;7&#34;:2.79,&#34;8&#34;:0.39,&#34;9&#34;:1.68,&#34;10&#34;:6.3,&#34;11&#34;:1.13,&#34;12&#34;:2.93,&#34;13&#34;:1375},{&#34;0&#34;:1,&#34;1&#34;:13.74,&#34;2&#34;:1.67,&#34;3&#34;:2.25,&#34;4&#34;:16.4,&#34;5&#34;:118,&#34;6&#34;:2.6,&#34;7&#34;:2.9,&#34;8&#34;:0.21,&#34;9&#34;:1.62,&#34;10&#34;:5.85,&#34;11&#34;:0.92,&#34;12&#34;:3.2,&#34;13&#34;:1060},{&#34;0&#34;:1,&#34;1&#34;:13.56,&#34;2&#34;:1.73,&#34;3&#34;:2.46,&#34;4&#34;:20.5,&#34;5&#34;:116,&#34;6&#34;:2.96,&#34;7&#34;:2.78,&#34;8&#34;:0.2,&#34;9&#34;:2.45,&#34;10&#34;:6.25,&#34;11&#34;:0.98,&#34;12&#34;:3.03,&#34;13&#34;:1120},{&#34;0&#34;:1,&#34;1&#34;:14.22,&#34;2&#34;:1.7,&#34;3&#34;:2.3,&#34;4&#34;:16.3,&#34;5&#34;:118,&#34;6&#34;:3.2,&#34;7&#34;:3.0,&#34;8&#34;:0.26,&#34;9&#34;:2.03,&#34;10&#34;:6.38,&#34;11&#34;:0.94,&#34;12&#34;:3.31,&#34;13&#34;:970},{&#34;0&#34;:1,&#34;1&#34;:13.29,&#34;2&#34;:1.97,&#34;3&#34;:2.68,&#34;4&#34;:16.8,&#34;5&#34;:102,&#34;6&#34;:3.0,&#34;7&#34;:3.23,&#34;8&#34;:0.31,&#34;9&#34;:1.66,&#34;10&#34;:6.0,&#34;11&#34;:1.07,&#34;12&#34;:2.84,&#34;13&#34;:1270},{&#34;0&#34;:1,&#34;1&#34;:13.72,&#34;2&#34;:1.43,&#34;3&#34;:2.5,&#34;4&#34;:16.7,&#34;5&#34;:108,&#34;6&#34;:3.4,&#34;7&#34;:3.67,&#34;8&#34;:0.19,&#34;9&#34;:2.04,&#34;10&#34;:6.8,&#34;11&#34;:0.89,&#34;12&#34;:2.87,&#34;13&#34;:1285},{&#34;0&#34;:2,&#34;1&#34;:12.37,&#34;2&#34;:0.94,&#34;3&#34;:1.36,&#34;4&#34;:10.6,&#34;5&#34;:88,&#34;6&#34;:1.98,&#34;7&#34;:0.57,&#34;8&#34;:0.28,&#34;9&#34;:0.42,&#34;10&#34;:1.95,&#34;11&#34;:1.05,&#34;12&#34;:1.82,&#34;13&#34;:520},{&#34;0&#34;:2,&#34;1&#34;:12.33,&#34;2&#34;:1.1,&#34;3&#34;:2.28,&#34;4&#34;:16.0,&#34;5&#34;:101,&#34;6&#34;:2.05,&#34;7&#34;:1.09,&#34;8&#34;:0.63,&#34;9&#34;:0.41,&#34;10&#34;:3.27,&#34;11&#34;:1.25,&#34;12&#34;:1.67,&#34;13&#34;:680},{&#34;0&#34;:2,&#34;1&#34;:12.64,&#34;2&#34;:1.36,&#34;3&#34;:2.02,&#34;4&#34;:16.8,&#34;5&#34;:100,&#34;6&#34;:2.02,&#34;7&#34;:1.41,&#34;8&#34;:0.53,&#34;9&#34;:0.62,&#34;10&#34;:5.75,&#34;11&#34;:0.98,&#34;12&#34;:1.59,&#34;13&#34;:450},{&#34;0&#34;:2,&#34;1&#34;:13.67,&#34;2&#34;:1.25,&#34;3&#34;:1.92,&#34;4&#34;:18.0,&#34;5&#34;:94,&#34;6&#34;:2.1,&#34;7&#34;:1.79,&#34;8&#34;:0.32,&#34;9&#34;:0.73,&#34;10&#34;:3.8,&#34;11&#34;:1.23,&#34;12&#34;:2.46,&#34;13&#34;:630},{&#34;0&#34;:2,&#34;1&#34;:12.37,&#34;2&#34;:1.13,&#34;3&#34;:2.16,&#34;4&#34;:19.0,&#34;5&#34;:87,&#34;6&#34;:3.5,&#34;7&#34;:3.1,&#34;8&#34;:0.19,&#34;9&#34;:1.87,&#34;10&#34;:4.45,&#34;11&#34;:1.22,&#34;12&#34;:2.87,&#34;13&#34;:420},{&#34;0&#34;:2,&#34;1&#34;:12.17,&#34;2&#34;:1.45,&#34;3&#34;:2.53,&#34;4&#34;:19.0,&#34;5&#34;:104,&#34;6&#34;:1.89,&#34;7&#34;:1.75,&#34;8&#34;:0.45,&#34;9&#34;:1.03,&#34;10&#34;:2.95,&#34;11&#34;:1.45,&#34;12&#34;:2.23,&#34;13&#34;:355},{&#34;0&#34;:2,&#34;1&#34;:12.37,&#34;2&#34;:1.21,&#34;3&#34;:2.56,&#34;4&#34;:18.1,&#34;5&#34;:98,&#34;6&#34;:2.42,&#34;7&#34;:2.65,&#34;8&#34;:0.37,&#34;9&#34;:2.08,&#34;10&#34;:4.6,&#34;11&#34;:1.19,&#34;12&#34;:2.3,&#34;13&#34;:678},{&#34;0&#34;:2,&#34;1&#34;:13.11,&#34;2&#34;:1.01,&#34;3&#34;:1.7,&#34;4&#34;:15.0,&#34;5&#34;:78,&#34;6&#34;:2.98,&#34;7&#34;:3.18,&#34;8&#34;:0.26,&#34;9&#34;:2.28,&#34;10&#34;:5.3,&#34;11&#34;:1.12,&#34;12&#34;:3.18,&#34;13&#34;:502},{&#34;0&#34;:2,&#34;1&#34;:12.37,&#34;2&#34;:1.17,&#34;3&#34;:1.92,&#34;4&#34;:19.6,&#34;5&#34;:78,&#34;6&#34;:2.11,&#34;7&#34;:2.0,&#34;8&#34;:0.27,&#34;9&#34;:1.04,&#34;10&#34;:4.68,&#34;11&#34;:1.12,&#34;12&#34;:3.48,&#34;13&#34;:510},{&#34;0&#34;:2,&#34;1&#34;:13.34,&#34;2&#34;:0.94,&#34;3&#34;:2.36,&#34;4&#34;:17.0,&#34;5&#34;:110,&#34;6&#34;:2.53,&#34;7&#34;:1.3,&#34;8&#34;:0.55,&#34;9&#34;:0.42,&#34;10&#34;:3.17,&#34;11&#34;:1.02,&#34;12&#34;:1.93,&#34;13&#34;:750},{&#34;0&#34;:2,&#34;1&#34;:12.21,&#34;2&#34;:1.19,&#34;3&#34;:1.75,&#34;4&#34;:16.8,&#34;5&#34;:151,&#34;6&#34;:1.85,&#34;7&#34;:1.28,&#34;8&#34;:0.14,&#34;9&#34;:2.5,&#34;10&#34;:2.85,&#34;11&#34;:1.28,&#34;12&#34;:3.07,&#34;13&#34;:718},{&#34;0&#34;:2,&#34;1&#34;:12.29,&#34;2&#34;:1.61,&#34;3&#34;:2.21,&#34;4&#34;:20.4,&#34;5&#34;:103,&#34;6&#34;:1.1,&#34;7&#34;:1.02,&#34;8&#34;:0.37,&#34;9&#34;:1.46,&#34;10&#34;:3.05,&#34;11&#34;:0.906,&#34;12&#34;:1.82,&#34;13&#34;:870},{&#34;0&#34;:2,&#34;1&#34;:13.86,&#34;2&#34;:1.51,&#34;3&#34;:2.67,&#34;4&#34;:25.0,&#34;5&#34;:86,&#34;6&#34;:2.95,&#34;7&#34;:2.86,&#34;8&#34;:0.21,&#34;9&#34;:1.87,&#34;10&#34;:3.38,&#34;11&#34;:1.36,&#34;12&#34;:3.16,&#34;13&#34;:410},{&#34;0&#34;:2,&#34;1&#34;:13.49,&#34;2&#34;:1.66,&#34;3&#34;:2.24,&#34;4&#34;:24.0,&#34;5&#34;:87,&#34;6&#34;:1.88,&#34;7&#34;:1.84,&#34;8&#34;:0.27,&#34;9&#34;:1.03,&#34;10&#34;:3.74,&#34;11&#34;:0.98,&#34;12&#34;:2.78,&#34;13&#34;:472},{&#34;0&#34;:2,&#34;1&#34;:12.99,&#34;2&#34;:1.67,&#34;3&#34;:2.6,&#34;4&#34;:30.0,&#34;5&#34;:139,&#34;6&#34;:3.3,&#34;7&#34;:2.89,&#34;8&#34;:0.21,&#34;9&#34;:1.96,&#34;10&#34;:3.35,&#34;11&#34;:1.31,&#34;12&#34;:3.5,&#34;13&#34;:985},{&#34;0&#34;:2,&#34;1&#34;:11.96,&#34;2&#34;:1.09,&#34;3&#34;:2.3,&#34;4&#34;:21.0,&#34;5&#34;:101,&#34;6&#34;:3.38,&#34;7&#34;:2.14,&#34;8&#34;:0.13,&#34;9&#34;:1.65,&#34;10&#34;:3.21,&#34;11&#34;:0.99,&#34;12&#34;:3.13,&#34;13&#34;:886},{&#34;0&#34;:2,&#34;1&#34;:11.66,&#34;2&#34;:1.88,&#34;3&#34;:1.92,&#34;4&#34;:16.0,&#34;5&#34;:97,&#34;6&#34;:1.61,&#34;7&#34;:1.57,&#34;8&#34;:0.34,&#34;9&#34;:1.15,&#34;10&#34;:3.8,&#34;11&#34;:1.23,&#34;12&#34;:2.14,&#34;13&#34;:428},{&#34;0&#34;:2,&#34;1&#34;:13.03,&#34;2&#34;:0.9,&#34;3&#34;:1.71,&#34;4&#34;:16.0,&#34;5&#34;:86,&#34;6&#34;:1.95,&#34;7&#34;:2.03,&#34;8&#34;:0.24,&#34;9&#34;:1.46,&#34;10&#34;:4.6,&#34;11&#34;:1.19,&#34;12&#34;:2.48,&#34;13&#34;:392},{&#34;0&#34;:2,&#34;1&#34;:11.84,&#34;2&#34;:2.89,&#34;3&#34;:2.23,&#34;4&#34;:18.0,&#34;5&#34;:112,&#34;6&#34;:1.72,&#34;7&#34;:1.32,&#34;8&#34;:0.43,&#34;9&#34;:0.95,&#34;10&#34;:2.65,&#34;11&#34;:0.96,&#34;12&#34;:2.52,&#34;13&#34;:500},{&#34;0&#34;:2,&#34;1&#34;:12.33,&#34;2&#34;:0.99,&#34;3&#34;:1.95,&#34;4&#34;:14.8,&#34;5&#34;:136,&#34;6&#34;:1.9,&#34;7&#34;:1.85,&#34;8&#34;:0.35,&#34;9&#34;:2.76,&#34;10&#34;:3.4,&#34;11&#34;:1.06,&#34;12&#34;:2.31,&#34;13&#34;:750},{&#34;0&#34;:2,&#34;1&#34;:12.7,&#34;2&#34;:3.87,&#34;3&#34;:2.4,&#34;4&#34;:23.0,&#34;5&#34;:101,&#34;6&#34;:2.83,&#34;7&#34;:2.55,&#34;8&#34;:0.43,&#34;9&#34;:1.95,&#34;10&#34;:2.57,&#34;11&#34;:1.19,&#34;12&#34;:3.13,&#34;13&#34;:463},{&#34;0&#34;:2,&#34;1&#34;:12.0,&#34;2&#34;:0.92,&#34;3&#34;:2.0,&#34;4&#34;:19.0,&#34;5&#34;:86,&#34;6&#34;:2.42,&#34;7&#34;:2.26,&#34;8&#34;:0.3,&#34;9&#34;:1.43,&#34;10&#34;:2.5,&#34;11&#34;:1.38,&#34;12&#34;:3.12,&#34;13&#34;:278},{&#34;0&#34;:2,&#34;1&#34;:12.72,&#34;2&#34;:1.81,&#34;3&#34;:2.2,&#34;4&#34;:18.8,&#34;5&#34;:86,&#34;6&#34;:2.2,&#34;7&#34;:2.53,&#34;8&#34;:0.26,&#34;9&#34;:1.77,&#34;10&#34;:3.9,&#34;11&#34;:1.16,&#34;12&#34;:3.14,&#34;13&#34;:714},{&#34;0&#34;:2,&#34;1&#34;:12.08,&#34;2&#34;:1.13,&#34;3&#34;:2.51,&#34;4&#34;:24.0,&#34;5&#34;:78,&#34;6&#34;:2.0,&#34;7&#34;:1.58,&#34;8&#34;:0.4,&#34;9&#34;:1.4,&#34;10&#34;:2.2,&#34;11&#34;:1.31,&#34;12&#34;:2.72,&#34;13&#34;:630},{&#34;0&#34;:2,&#34;1&#34;:13.05,&#34;2&#34;:3.86,&#34;3&#34;:2.32,&#34;4&#34;:22.5,&#34;5&#34;:85,&#34;6&#34;:1.65,&#34;7&#34;:1.59,&#34;8&#34;:0.61,&#34;9&#34;:1.62,&#34;10&#34;:4.8,&#34;11&#34;:0.84,&#34;12&#34;:2.01,&#34;13&#34;:515},{&#34;0&#34;:2,&#34;1&#34;:11.84,&#34;2&#34;:0.89,&#34;3&#34;:2.58,&#34;4&#34;:18.0,&#34;5&#34;:94,&#34;6&#34;:2.2,&#34;7&#34;:2.21,&#34;8&#34;:0.22,&#34;9&#34;:2.35,&#34;10&#34;:3.05,&#34;11&#34;:0.79,&#34;12&#34;:3.08,&#34;13&#34;:520},{&#34;0&#34;:2,&#34;1&#34;:12.67,&#34;2&#34;:0.98,&#34;3&#34;:2.24,&#34;4&#34;:18.0,&#34;5&#34;:99,&#34;6&#34;:2.2,&#34;7&#34;:1.94,&#34;8&#34;:0.3,&#34;9&#34;:1.46,&#34;10&#34;:2.62,&#34;11&#34;:1.23,&#34;12&#34;:3.16,&#34;13&#34;:450},{&#34;0&#34;:2,&#34;1&#34;:12.16,&#34;2&#34;:1.61,&#34;3&#34;:2.31,&#34;4&#34;:22.8,&#34;5&#34;:90,&#34;6&#34;:1.78,&#34;7&#34;:1.69,&#34;8&#34;:0.43,&#34;9&#34;:1.56,&#34;10&#34;:2.45,&#34;11&#34;:1.33,&#34;12&#34;:2.26,&#34;13&#34;:495},{&#34;0&#34;:2,&#34;1&#34;:11.65,&#34;2&#34;:1.67,&#34;3&#34;:2.62,&#34;4&#34;:26.0,&#34;5&#34;:88,&#34;6&#34;:1.92,&#34;7&#34;:1.61,&#34;8&#34;:0.4,&#34;9&#34;:1.34,&#34;10&#34;:2.6,&#34;11&#34;:1.36,&#34;12&#34;:3.21,&#34;13&#34;:562},{&#34;0&#34;:2,&#34;1&#34;:11.64,&#34;2&#34;:2.06,&#34;3&#34;:2.46,&#34;4&#34;:21.6,&#34;5&#34;:84,&#34;6&#34;:1.95,&#34;7&#34;:1.69,&#34;8&#34;:0.48,&#34;9&#34;:1.35,&#34;10&#34;:2.8,&#34;11&#34;:1.0,&#34;12&#34;:2.75,&#34;13&#34;:680},{&#34;0&#34;:2,&#34;1&#34;:12.08,&#34;2&#34;:1.33,&#34;3&#34;:2.3,&#34;4&#34;:23.6,&#34;5&#34;:70,&#34;6&#34;:2.2,&#34;7&#34;:1.59,&#34;8&#34;:0.42,&#34;9&#34;:1.38,&#34;10&#34;:1.74,&#34;11&#34;:1.07,&#34;12&#34;:3.21,&#34;13&#34;:625},{&#34;0&#34;:2,&#34;1&#34;:12.08,&#34;2&#34;:1.83,&#34;3&#34;:2.32,&#34;4&#34;:18.5,&#34;5&#34;:81,&#34;6&#34;:1.6,&#34;7&#34;:1.5,&#34;8&#34;:0.52,&#34;9&#34;:1.64,&#34;10&#34;:2.4,&#34;11&#34;:1.08,&#34;12&#34;:2.27,&#34;13&#34;:480},{&#34;0&#34;:2,&#34;1&#34;:12.0,&#34;2&#34;:1.51,&#34;3&#34;:2.42,&#34;4&#34;:22.0,&#34;5&#34;:86,&#34;6&#34;:1.45,&#34;7&#34;:1.25,&#34;8&#34;:0.5,&#34;9&#34;:1.63,&#34;10&#34;:3.6,&#34;11&#34;:1.05,&#34;12&#34;:2.65,&#34;13&#34;:450},{&#34;0&#34;:2,&#34;1&#34;:12.69,&#34;2&#34;:1.53,&#34;3&#34;:2.26,&#34;4&#34;:20.7,&#34;5&#34;:80,&#34;6&#34;:1.38,&#34;7&#34;:1.46,&#34;8&#34;:0.58,&#34;9&#34;:1.62,&#34;10&#34;:3.05,&#34;11&#34;:0.96,&#34;12&#34;:2.06,&#34;13&#34;:495},{&#34;0&#34;:2,&#34;1&#34;:12.29,&#34;2&#34;:2.83,&#34;3&#34;:2.22,&#34;4&#34;:18.0,&#34;5&#34;:88,&#34;6&#34;:2.45,&#34;7&#34;:2.25,&#34;8&#34;:0.25,&#34;9&#34;:1.99,&#34;10&#34;:2.15,&#34;11&#34;:1.15,&#34;12&#34;:3.3,&#34;13&#34;:290},{&#34;0&#34;:2,&#34;1&#34;:11.62,&#34;2&#34;:1.99,&#34;3&#34;:2.28,&#34;4&#34;:18.0,&#34;5&#34;:98,&#34;6&#34;:3.02,&#34;7&#34;:2.26,&#34;8&#34;:0.17,&#34;9&#34;:1.35,&#34;10&#34;:3.25,&#34;11&#34;:1.16,&#34;12&#34;:2.96,&#34;13&#34;:345},{&#34;0&#34;:2,&#34;1&#34;:12.47,&#34;2&#34;:1.52,&#34;3&#34;:2.2,&#34;4&#34;:19.0,&#34;5&#34;:162,&#34;6&#34;:2.5,&#34;7&#34;:2.27,&#34;8&#34;:0.32,&#34;9&#34;:3.28,&#34;10&#34;:2.6,&#34;11&#34;:1.16,&#34;12&#34;:2.63,&#34;13&#34;:937},{&#34;0&#34;:2,&#34;1&#34;:11.81,&#34;2&#34;:2.12,&#34;3&#34;:2.74,&#34;4&#34;:21.5,&#34;5&#34;:134,&#34;6&#34;:1.6,&#34;7&#34;:0.99,&#34;8&#34;:0.14,&#34;9&#34;:1.56,&#34;10&#34;:2.5,&#34;11&#34;:0.95,&#34;12&#34;:2.26,&#34;13&#34;:625},{&#34;0&#34;:2,&#34;1&#34;:12.29,&#34;2&#34;:1.41,&#34;3&#34;:1.98,&#34;4&#34;:16.0,&#34;5&#34;:85,&#34;6&#34;:2.55,&#34;7&#34;:2.5,&#34;8&#34;:0.29,&#34;9&#34;:1.77,&#34;10&#34;:2.9,&#34;11&#34;:1.23,&#34;12&#34;:2.74,&#34;13&#34;:428},{&#34;0&#34;:2,&#34;1&#34;:12.37,&#34;2&#34;:1.07,&#34;3&#34;:2.1,&#34;4&#34;:18.5,&#34;5&#34;:88,&#34;6&#34;:3.52,&#34;7&#34;:3.75,&#34;8&#34;:0.24,&#34;9&#34;:1.95,&#34;10&#34;:4.5,&#34;11&#34;:1.04,&#34;12&#34;:2.77,&#34;13&#34;:660},{&#34;0&#34;:2,&#34;1&#34;:12.29,&#34;2&#34;:3.17,&#34;3&#34;:2.21,&#34;4&#34;:18.0,&#34;5&#34;:88,&#34;6&#34;:2.85,&#34;7&#34;:2.99,&#34;8&#34;:0.45,&#34;9&#34;:2.81,&#34;10&#34;:2.3,&#34;11&#34;:1.42,&#34;12&#34;:2.83,&#34;13&#34;:406},{&#34;0&#34;:2,&#34;1&#34;:12.08,&#34;2&#34;:2.08,&#34;3&#34;:1.7,&#34;4&#34;:17.5,&#34;5&#34;:97,&#34;6&#34;:2.23,&#34;7&#34;:2.17,&#34;8&#34;:0.26,&#34;9&#34;:1.4,&#34;10&#34;:3.3,&#34;11&#34;:1.27,&#34;12&#34;:2.96,&#34;13&#34;:710},{&#34;0&#34;:2,&#34;1&#34;:12.6,&#34;2&#34;:1.34,&#34;3&#34;:1.9,&#34;4&#34;:18.5,&#34;5&#34;:88,&#34;6&#34;:1.45,&#34;7&#34;:1.36,&#34;8&#34;:0.29,&#34;9&#34;:1.35,&#34;10&#34;:2.45,&#34;11&#34;:1.04,&#34;12&#34;:2.77,&#34;13&#34;:562},{&#34;0&#34;:2,&#34;1&#34;:12.34,&#34;2&#34;:2.45,&#34;3&#34;:2.46,&#34;4&#34;:21.0,&#34;5&#34;:98,&#34;6&#34;:2.56,&#34;7&#34;:2.11,&#34;8&#34;:0.34,&#34;9&#34;:1.31,&#34;10&#34;:2.8,&#34;11&#34;:0.8,&#34;12&#34;:3.38,&#34;13&#34;:438},{&#34;0&#34;:2,&#34;1&#34;:11.82,&#34;2&#34;:1.72,&#34;3&#34;:1.88,&#34;4&#34;:19.5,&#34;5&#34;:86,&#34;6&#34;:2.5,&#34;7&#34;:1.64,&#34;8&#34;:0.37,&#34;9&#34;:1.42,&#34;10&#34;:2.06,&#34;11&#34;:0.94,&#34;12&#34;:2.44,&#34;13&#34;:415},{&#34;0&#34;:2,&#34;1&#34;:12.51,&#34;2&#34;:1.73,&#34;3&#34;:1.98,&#34;4&#34;:20.5,&#34;5&#34;:85,&#34;6&#34;:2.2,&#34;7&#34;:1.92,&#34;8&#34;:0.32,&#34;9&#34;:1.48,&#34;10&#34;:2.94,&#34;11&#34;:1.04,&#34;12&#34;:3.57,&#34;13&#34;:672},{&#34;0&#34;:2,&#34;1&#34;:12.42,&#34;2&#34;:2.55,&#34;3&#34;:2.27,&#34;4&#34;:22.0,&#34;5&#34;:90,&#34;6&#34;:1.68,&#34;7&#34;:1.84,&#34;8&#34;:0.66,&#34;9&#34;:1.42,&#34;10&#34;:2.7,&#34;11&#34;:0.86,&#34;12&#34;:3.3,&#34;13&#34;:315},{&#34;0&#34;:2,&#34;1&#34;:12.25,&#34;2&#34;:1.73,&#34;3&#34;:2.12,&#34;4&#34;:19.0,&#34;5&#34;:80,&#34;6&#34;:1.65,&#34;7&#34;:2.03,&#34;8&#34;:0.37,&#34;9&#34;:1.63,&#34;10&#34;:3.4,&#34;11&#34;:1.0,&#34;12&#34;:3.17,&#34;13&#34;:510},{&#34;0&#34;:2,&#34;1&#34;:12.72,&#34;2&#34;:1.75,&#34;3&#34;:2.28,&#34;4&#34;:22.5,&#34;5&#34;:84,&#34;6&#34;:1.38,&#34;7&#34;:1.76,&#34;8&#34;:0.48,&#34;9&#34;:1.63,&#34;10&#34;:3.3,&#34;11&#34;:0.88,&#34;12&#34;:2.42,&#34;13&#34;:488},{&#34;0&#34;:2,&#34;1&#34;:12.22,&#34;2&#34;:1.29,&#34;3&#34;:1.94,&#34;4&#34;:19.0,&#34;5&#34;:92,&#34;6&#34;:2.36,&#34;7&#34;:2.04,&#34;8&#34;:0.39,&#34;9&#34;:2.08,&#34;10&#34;:2.7,&#34;11&#34;:0.86,&#34;12&#34;:3.02,&#34;13&#34;:312},{&#34;0&#34;:2,&#34;1&#34;:11.61,&#34;2&#34;:1.35,&#34;3&#34;:2.7,&#34;4&#34;:20.0,&#34;5&#34;:94,&#34;6&#34;:2.74,&#34;7&#34;:2.92,&#34;8&#34;:0.29,&#34;9&#34;:2.49,&#34;10&#34;:2.65,&#34;11&#34;:0.96,&#34;12&#34;:3.26,&#34;13&#34;:680},{&#34;0&#34;:2,&#34;1&#34;:11.46,&#34;2&#34;:3.74,&#34;3&#34;:1.82,&#34;4&#34;:19.5,&#34;5&#34;:107,&#34;6&#34;:3.18,&#34;7&#34;:2.58,&#34;8&#34;:0.24,&#34;9&#34;:3.58,&#34;10&#34;:2.9,&#34;11&#34;:0.75,&#34;12&#34;:2.81,&#34;13&#34;:562},{&#34;0&#34;:2,&#34;1&#34;:12.52,&#34;2&#34;:2.43,&#34;3&#34;:2.17,&#34;4&#34;:21.0,&#34;5&#34;:88,&#34;6&#34;:2.55,&#34;7&#34;:2.27,&#34;8&#34;:0.26,&#34;9&#34;:1.22,&#34;10&#34;:2.0,&#34;11&#34;:0.9,&#34;12&#34;:2.78,&#34;13&#34;:325},{&#34;0&#34;:2,&#34;1&#34;:11.76,&#34;2&#34;:2.68,&#34;3&#34;:2.92,&#34;4&#34;:20.0,&#34;5&#34;:103,&#34;6&#34;:1.75,&#34;7&#34;:2.03,&#34;8&#34;:0.6,&#34;9&#34;:1.05,&#34;10&#34;:3.8,&#34;11&#34;:1.23,&#34;12&#34;:2.5,&#34;13&#34;:607},{&#34;0&#34;:2,&#34;1&#34;:11.41,&#34;2&#34;:0.74,&#34;3&#34;:2.5,&#34;4&#34;:21.0,&#34;5&#34;:88,&#34;6&#34;:2.48,&#34;7&#34;:2.01,&#34;8&#34;:0.42,&#34;9&#34;:1.44,&#34;10&#34;:3.08,&#34;11&#34;:1.1,&#34;12&#34;:2.31,&#34;13&#34;:434},{&#34;0&#34;:2,&#34;1&#34;:12.08,&#34;2&#34;:1.39,&#34;3&#34;:2.5,&#34;4&#34;:22.5,&#34;5&#34;:84,&#34;6&#34;:2.56,&#34;7&#34;:2.29,&#34;8&#34;:0.43,&#34;9&#34;:1.04,&#34;10&#34;:2.9,&#34;11&#34;:0.93,&#34;12&#34;:3.19,&#34;13&#34;:385},{&#34;0&#34;:2,&#34;1&#34;:11.03,&#34;2&#34;:1.51,&#34;3&#34;:2.2,&#34;4&#34;:21.5,&#34;5&#34;:85,&#34;6&#34;:2.46,&#34;7&#34;:2.17,&#34;8&#34;:0.52,&#34;9&#34;:2.01,&#34;10&#34;:1.9,&#34;11&#34;:1.71,&#34;12&#34;:2.87,&#34;13&#34;:407},{&#34;0&#34;:2,&#34;1&#34;:11.82,&#34;2&#34;:1.47,&#34;3&#34;:1.99,&#34;4&#34;:20.8,&#34;5&#34;:86,&#34;6&#34;:1.98,&#34;7&#34;:1.6,&#34;8&#34;:0.3,&#34;9&#34;:1.53,&#34;10&#34;:1.95,&#34;11&#34;:0.95,&#34;12&#34;:3.33,&#34;13&#34;:495},{&#34;0&#34;:2,&#34;1&#34;:12.42,&#34;2&#34;:1.61,&#34;3&#34;:2.19,&#34;4&#34;:22.5,&#34;5&#34;:108,&#34;6&#34;:2.0,&#34;7&#34;:2.09,&#34;8&#34;:0.34,&#34;9&#34;:1.61,&#34;10&#34;:2.06,&#34;11&#34;:1.06,&#34;12&#34;:2.96,&#34;13&#34;:345},{&#34;0&#34;:2,&#34;1&#34;:12.77,&#34;2&#34;:3.43,&#34;3&#34;:1.98,&#34;4&#34;:16.0,&#34;5&#34;:80,&#34;6&#34;:1.63,&#34;7&#34;:1.25,&#34;8&#34;:0.43,&#34;9&#34;:0.83,&#34;10&#34;:3.4,&#34;11&#34;:0.7,&#34;12&#34;:2.12,&#34;13&#34;:372},{&#34;0&#34;:2,&#34;1&#34;:12.0,&#34;2&#34;:3.43,&#34;3&#34;:2.0,&#34;4&#34;:19.0,&#34;5&#34;:87,&#34;6&#34;:2.0,&#34;7&#34;:1.64,&#34;8&#34;:0.37,&#34;9&#34;:1.87,&#34;10&#34;:1.28,&#34;11&#34;:0.93,&#34;12&#34;:3.05,&#34;13&#34;:564},{&#34;0&#34;:2,&#34;1&#34;:11.45,&#34;2&#34;:2.4,&#34;3&#34;:2.42,&#34;4&#34;:20.0,&#34;5&#34;:96,&#34;6&#34;:2.9,&#34;7&#34;:2.79,&#34;8&#34;:0.32,&#34;9&#34;:1.83,&#34;10&#34;:3.25,&#34;11&#34;:0.8,&#34;12&#34;:3.39,&#34;13&#34;:625},{&#34;0&#34;:2,&#34;1&#34;:11.56,&#34;2&#34;:2.05,&#34;3&#34;:3.23,&#34;4&#34;:28.5,&#34;5&#34;:119,&#34;6&#34;:3.18,&#34;7&#34;:5.08,&#34;8&#34;:0.47,&#34;9&#34;:1.87,&#34;10&#34;:6.0,&#34;11&#34;:0.93,&#34;12&#34;:3.69,&#34;13&#34;:465},{&#34;0&#34;:2,&#34;1&#34;:12.42,&#34;2&#34;:4.43,&#34;3&#34;:2.73,&#34;4&#34;:26.5,&#34;5&#34;:102,&#34;6&#34;:2.2,&#34;7&#34;:2.13,&#34;8&#34;:0.43,&#34;9&#34;:1.71,&#34;10&#34;:2.08,&#34;11&#34;:0.92,&#34;12&#34;:3.12,&#34;13&#34;:365},{&#34;0&#34;:2,&#34;1&#34;:13.05,&#34;2&#34;:5.8,&#34;3&#34;:2.13,&#34;4&#34;:21.5,&#34;5&#34;:86,&#34;6&#34;:2.62,&#34;7&#34;:2.65,&#34;8&#34;:0.3,&#34;9&#34;:2.01,&#34;10&#34;:2.6,&#34;11&#34;:0.73,&#34;12&#34;:3.1,&#34;13&#34;:380},{&#34;0&#34;:2,&#34;1&#34;:11.87,&#34;2&#34;:4.31,&#34;3&#34;:2.39,&#34;4&#34;:21.0,&#34;5&#34;:82,&#34;6&#34;:2.86,&#34;7&#34;:3.03,&#34;8&#34;:0.21,&#34;9&#34;:2.91,&#34;10&#34;:2.8,&#34;11&#34;:0.75,&#34;12&#34;:3.64,&#34;13&#34;:380},{&#34;0&#34;:2,&#34;1&#34;:12.07,&#34;2&#34;:2.16,&#34;3&#34;:2.17,&#34;4&#34;:21.0,&#34;5&#34;:85,&#34;6&#34;:2.6,&#34;7&#34;:2.65,&#34;8&#34;:0.37,&#34;9&#34;:1.35,&#34;10&#34;:2.76,&#34;11&#34;:0.86,&#34;12&#34;:3.28,&#34;13&#34;:378},{&#34;0&#34;:2,&#34;1&#34;:12.43,&#34;2&#34;:1.53,&#34;3&#34;:2.29,&#34;4&#34;:21.5,&#34;5&#34;:86,&#34;6&#34;:2.74,&#34;7&#34;:3.15,&#34;8&#34;:0.39,&#34;9&#34;:1.77,&#34;10&#34;:3.94,&#34;11&#34;:0.69,&#34;12&#34;:2.84,&#34;13&#34;:352},{&#34;0&#34;:2,&#34;1&#34;:11.79,&#34;2&#34;:2.13,&#34;3&#34;:2.78,&#34;4&#34;:28.5,&#34;5&#34;:92,&#34;6&#34;:2.13,&#34;7&#34;:2.24,&#34;8&#34;:0.58,&#34;9&#34;:1.76,&#34;10&#34;:3.0,&#34;11&#34;:0.97,&#34;12&#34;:2.44,&#34;13&#34;:466},{&#34;0&#34;:2,&#34;1&#34;:12.37,&#34;2&#34;:1.63,&#34;3&#34;:2.3,&#34;4&#34;:24.5,&#34;5&#34;:88,&#34;6&#34;:2.22,&#34;7&#34;:2.45,&#34;8&#34;:0.4,&#34;9&#34;:1.9,&#34;10&#34;:2.12,&#34;11&#34;:0.89,&#34;12&#34;:2.78,&#34;13&#34;:342},{&#34;0&#34;:2,&#34;1&#34;:12.04,&#34;2&#34;:4.3,&#34;3&#34;:2.38,&#34;4&#34;:22.0,&#34;5&#34;:80,&#34;6&#34;:2.1,&#34;7&#34;:1.75,&#34;8&#34;:0.42,&#34;9&#34;:1.35,&#34;10&#34;:2.6,&#34;11&#34;:0.79,&#34;12&#34;:2.57,&#34;13&#34;:580},{&#34;0&#34;:3,&#34;1&#34;:12.86,&#34;2&#34;:1.35,&#34;3&#34;:2.32,&#34;4&#34;:18.0,&#34;5&#34;:122,&#34;6&#34;:1.51,&#34;7&#34;:1.25,&#34;8&#34;:0.21,&#34;9&#34;:0.94,&#34;10&#34;:4.1,&#34;11&#34;:0.76,&#34;12&#34;:1.29,&#34;13&#34;:630},{&#34;0&#34;:3,&#34;1&#34;:12.88,&#34;2&#34;:2.99,&#34;3&#34;:2.4,&#34;4&#34;:20.0,&#34;5&#34;:104,&#34;6&#34;:1.3,&#34;7&#34;:1.22,&#34;8&#34;:0.24,&#34;9&#34;:0.83,&#34;10&#34;:5.4,&#34;11&#34;:0.74,&#34;12&#34;:1.42,&#34;13&#34;:530},{&#34;0&#34;:3,&#34;1&#34;:12.81,&#34;2&#34;:2.31,&#34;3&#34;:2.4,&#34;4&#34;:24.0,&#34;5&#34;:98,&#34;6&#34;:1.15,&#34;7&#34;:1.09,&#34;8&#34;:0.27,&#34;9&#34;:0.83,&#34;10&#34;:5.7,&#34;11&#34;:0.66,&#34;12&#34;:1.36,&#34;13&#34;:560},{&#34;0&#34;:3,&#34;1&#34;:12.7,&#34;2&#34;:3.55,&#34;3&#34;:2.36,&#34;4&#34;:21.5,&#34;5&#34;:106,&#34;6&#34;:1.7,&#34;7&#34;:1.2,&#34;8&#34;:0.17,&#34;9&#34;:0.84,&#34;10&#34;:5.0,&#34;11&#34;:0.78,&#34;12&#34;:1.29,&#34;13&#34;:600},{&#34;0&#34;:3,&#34;1&#34;:12.51,&#34;2&#34;:1.24,&#34;3&#34;:2.25,&#34;4&#34;:17.5,&#34;5&#34;:85,&#34;6&#34;:2.0,&#34;7&#34;:0.58,&#34;8&#34;:0.6,&#34;9&#34;:1.25,&#34;10&#34;:5.45,&#34;11&#34;:0.75,&#34;12&#34;:1.51,&#34;13&#34;:650},{&#34;0&#34;:3,&#34;1&#34;:12.6,&#34;2&#34;:2.46,&#34;3&#34;:2.2,&#34;4&#34;:18.5,&#34;5&#34;:94,&#34;6&#34;:1.62,&#34;7&#34;:0.66,&#34;8&#34;:0.63,&#34;9&#34;:0.94,&#34;10&#34;:7.1,&#34;11&#34;:0.73,&#34;12&#34;:1.58,&#34;13&#34;:695},{&#34;0&#34;:3,&#34;1&#34;:12.25,&#34;2&#34;:4.72,&#34;3&#34;:2.54,&#34;4&#34;:21.0,&#34;5&#34;:89,&#34;6&#34;:1.38,&#34;7&#34;:0.47,&#34;8&#34;:0.53,&#34;9&#34;:0.8,&#34;10&#34;:3.85,&#34;11&#34;:0.75,&#34;12&#34;:1.27,&#34;13&#34;:720},{&#34;0&#34;:3,&#34;1&#34;:12.53,&#34;2&#34;:5.51,&#34;3&#34;:2.64,&#34;4&#34;:25.0,&#34;5&#34;:96,&#34;6&#34;:1.79,&#34;7&#34;:0.6,&#34;8&#34;:0.63,&#34;9&#34;:1.1,&#34;10&#34;:5.0,&#34;11&#34;:0.82,&#34;12&#34;:1.69,&#34;13&#34;:515},{&#34;0&#34;:3,&#34;1&#34;:13.49,&#34;2&#34;:3.59,&#34;3&#34;:2.19,&#34;4&#34;:19.5,&#34;5&#34;:88,&#34;6&#34;:1.62,&#34;7&#34;:0.48,&#34;8&#34;:0.58,&#34;9&#34;:0.88,&#34;10&#34;:5.7,&#34;11&#34;:0.81,&#34;12&#34;:1.82,&#34;13&#34;:580},{&#34;0&#34;:3,&#34;1&#34;:12.84,&#34;2&#34;:2.96,&#34;3&#34;:2.61,&#34;4&#34;:24.0,&#34;5&#34;:101,&#34;6&#34;:2.32,&#34;7&#34;:0.6,&#34;8&#34;:0.53,&#34;9&#34;:0.81,&#34;10&#34;:4.92,&#34;11&#34;:0.89,&#34;12&#34;:2.15,&#34;13&#34;:590},{&#34;0&#34;:3,&#34;1&#34;:12.93,&#34;2&#34;:2.81,&#34;3&#34;:2.7,&#34;4&#34;:21.0,&#34;5&#34;:96,&#34;6&#34;:1.54,&#34;7&#34;:0.5,&#34;8&#34;:0.53,&#34;9&#34;:0.75,&#34;10&#34;:4.6,&#34;11&#34;:0.77,&#34;12&#34;:2.31,&#34;13&#34;:600},{&#34;0&#34;:3,&#34;1&#34;:13.36,&#34;2&#34;:2.56,&#34;3&#34;:2.35,&#34;4&#34;:20.0,&#34;5&#34;:89,&#34;6&#34;:1.4,&#34;7&#34;:0.5,&#34;8&#34;:0.37,&#34;9&#34;:0.64,&#34;10&#34;:5.6,&#34;11&#34;:0.7,&#34;12&#34;:2.47,&#34;13&#34;:780},{&#34;0&#34;:3,&#34;1&#34;:13.52,&#34;2&#34;:3.17,&#34;3&#34;:2.72,&#34;4&#34;:23.5,&#34;5&#34;:97,&#34;6&#34;:1.55,&#34;7&#34;:0.52,&#34;8&#34;:0.5,&#34;9&#34;:0.55,&#34;10&#34;:4.35,&#34;11&#34;:0.89,&#34;12&#34;:2.06,&#34;13&#34;:520},{&#34;0&#34;:3,&#34;1&#34;:13.62,&#34;2&#34;:4.95,&#34;3&#34;:2.35,&#34;4&#34;:20.0,&#34;5&#34;:92,&#34;6&#34;:2.0,&#34;7&#34;:0.8,&#34;8&#34;:0.47,&#34;9&#34;:1.02,&#34;10&#34;:4.4,&#34;11&#34;:0.91,&#34;12&#34;:2.05,&#34;13&#34;:550},{&#34;0&#34;:3,&#34;1&#34;:12.25,&#34;2&#34;:3.88,&#34;3&#34;:2.2,&#34;4&#34;:18.5,&#34;5&#34;:112,&#34;6&#34;:1.38,&#34;7&#34;:0.78,&#34;8&#34;:0.29,&#34;9&#34;:1.14,&#34;10&#34;:8.21,&#34;11&#34;:0.65,&#34;12&#34;:2.0,&#34;13&#34;:855},{&#34;0&#34;:3,&#34;1&#34;:13.16,&#34;2&#34;:3.57,&#34;3&#34;:2.15,&#34;4&#34;:21.0,&#34;5&#34;:102,&#34;6&#34;:1.5,&#34;7&#34;:0.55,&#34;8&#34;:0.43,&#34;9&#34;:1.3,&#34;10&#34;:4.0,&#34;11&#34;:0.6,&#34;12&#34;:1.68,&#34;13&#34;:830},{&#34;0&#34;:3,&#34;1&#34;:13.88,&#34;2&#34;:5.04,&#34;3&#34;:2.23,&#34;4&#34;:20.0,&#34;5&#34;:80,&#34;6&#34;:0.98,&#34;7&#34;:0.34,&#34;8&#34;:0.4,&#34;9&#34;:0.68,&#34;10&#34;:4.9,&#34;11&#34;:0.58,&#34;12&#34;:1.33,&#34;13&#34;:415},{&#34;0&#34;:3,&#34;1&#34;:12.87,&#34;2&#34;:4.61,&#34;3&#34;:2.48,&#34;4&#34;:21.5,&#34;5&#34;:86,&#34;6&#34;:1.7,&#34;7&#34;:0.65,&#34;8&#34;:0.47,&#34;9&#34;:0.86,&#34;10&#34;:7.65,&#34;11&#34;:0.54,&#34;12&#34;:1.86,&#34;13&#34;:625},{&#34;0&#34;:3,&#34;1&#34;:13.32,&#34;2&#34;:3.24,&#34;3&#34;:2.38,&#34;4&#34;:21.5,&#34;5&#34;:92,&#34;6&#34;:1.93,&#34;7&#34;:0.76,&#34;8&#34;:0.45,&#34;9&#34;:1.25,&#34;10&#34;:8.42,&#34;11&#34;:0.55,&#34;12&#34;:1.62,&#34;13&#34;:650},{&#34;0&#34;:3,&#34;1&#34;:13.08,&#34;2&#34;:3.9,&#34;3&#34;:2.36,&#34;4&#34;:21.5,&#34;5&#34;:113,&#34;6&#34;:1.41,&#34;7&#34;:1.39,&#34;8&#34;:0.34,&#34;9&#34;:1.14,&#34;10&#34;:9.4,&#34;11&#34;:0.57,&#34;12&#34;:1.33,&#34;13&#34;:550},{&#34;0&#34;:3,&#34;1&#34;:13.5,&#34;2&#34;:3.12,&#34;3&#34;:2.62,&#34;4&#34;:24.0,&#34;5&#34;:123,&#34;6&#34;:1.4,&#34;7&#34;:1.57,&#34;8&#34;:0.22,&#34;9&#34;:1.25,&#34;10&#34;:8.6,&#34;11&#34;:0.59,&#34;12&#34;:1.3,&#34;13&#34;:500},{&#34;0&#34;:3,&#34;1&#34;:12.79,&#34;2&#34;:2.67,&#34;3&#34;:2.48,&#34;4&#34;:22.0,&#34;5&#34;:112,&#34;6&#34;:1.48,&#34;7&#34;:1.36,&#34;8&#34;:0.24,&#34;9&#34;:1.26,&#34;10&#34;:10.8,&#34;11&#34;:0.48,&#34;12&#34;:1.47,&#34;13&#34;:480},{&#34;0&#34;:3,&#34;1&#34;:13.11,&#34;2&#34;:1.9,&#34;3&#34;:2.75,&#34;4&#34;:25.5,&#34;5&#34;:116,&#34;6&#34;:2.2,&#34;7&#34;:1.28,&#34;8&#34;:0.26,&#34;9&#34;:1.56,&#34;10&#34;:7.1,&#34;11&#34;:0.61,&#34;12&#34;:1.33,&#34;13&#34;:425},{&#34;0&#34;:3,&#34;1&#34;:13.23,&#34;2&#34;:3.3,&#34;3&#34;:2.28,&#34;4&#34;:18.5,&#34;5&#34;:98,&#34;6&#34;:1.8,&#34;7&#34;:0.83,&#34;8&#34;:0.61,&#34;9&#34;:1.87,&#34;10&#34;:10.52,&#34;11&#34;:0.56,&#34;12&#34;:1.51,&#34;13&#34;:675},{&#34;0&#34;:3,&#34;1&#34;:12.58,&#34;2&#34;:1.29,&#34;3&#34;:2.1,&#34;4&#34;:20.0,&#34;5&#34;:103,&#34;6&#34;:1.48,&#34;7&#34;:0.58,&#34;8&#34;:0.53,&#34;9&#34;:1.4,&#34;10&#34;:7.6,&#34;11&#34;:0.58,&#34;12&#34;:1.55,&#34;13&#34;:640},{&#34;0&#34;:3,&#34;1&#34;:13.17,&#34;2&#34;:5.19,&#34;3&#34;:2.32,&#34;4&#34;:22.0,&#34;5&#34;:93,&#34;6&#34;:1.74,&#34;7&#34;:0.63,&#34;8&#34;:0.61,&#34;9&#34;:1.55,&#34;10&#34;:7.9,&#34;11&#34;:0.6,&#34;12&#34;:1.48,&#34;13&#34;:725},{&#34;0&#34;:3,&#34;1&#34;:13.84,&#34;2&#34;:4.12,&#34;3&#34;:2.38,&#34;4&#34;:19.5,&#34;5&#34;:89,&#34;6&#34;:1.8,&#34;7&#34;:0.83,&#34;8&#34;:0.48,&#34;9&#34;:1.56,&#34;10&#34;:9.01,&#34;11&#34;:0.57,&#34;12&#34;:1.64,&#34;13&#34;:480},{&#34;0&#34;:3,&#34;1&#34;:12.45,&#34;2&#34;:3.03,&#34;3&#34;:2.64,&#34;4&#34;:27.0,&#34;5&#34;:97,&#34;6&#34;:1.9,&#34;7&#34;:0.58,&#34;8&#34;:0.63,&#34;9&#34;:1.14,&#34;10&#34;:7.5,&#34;11&#34;:0.67,&#34;12&#34;:1.73,&#34;13&#34;:880},{&#34;0&#34;:3,&#34;1&#34;:14.34,&#34;2&#34;:1.68,&#34;3&#34;:2.7,&#34;4&#34;:25.0,&#34;5&#34;:98,&#34;6&#34;:2.8,&#34;7&#34;:1.31,&#34;8&#34;:0.53,&#34;9&#34;:2.7,&#34;10&#34;:13.0,&#34;11&#34;:0.57,&#34;12&#34;:1.96,&#34;13&#34;:660},{&#34;0&#34;:3,&#34;1&#34;:13.48,&#34;2&#34;:1.67,&#34;3&#34;:2.64,&#34;4&#34;:22.5,&#34;5&#34;:89,&#34;6&#34;:2.6,&#34;7&#34;:1.1,&#34;8&#34;:0.52,&#34;9&#34;:2.29,&#34;10&#34;:11.75,&#34;11&#34;:0.57,&#34;12&#34;:1.78,&#34;13&#34;:620},{&#34;0&#34;:3,&#34;1&#34;:12.36,&#34;2&#34;:3.83,&#34;3&#34;:2.38,&#34;4&#34;:21.0,&#34;5&#34;:88,&#34;6&#34;:2.3,&#34;7&#34;:0.92,&#34;8&#34;:0.5,&#34;9&#34;:1.04,&#34;10&#34;:7.65,&#34;11&#34;:0.56,&#34;12&#34;:1.58,&#34;13&#34;:520},{&#34;0&#34;:3,&#34;1&#34;:13.69,&#34;2&#34;:3.26,&#34;3&#34;:2.54,&#34;4&#34;:20.0,&#34;5&#34;:107,&#34;6&#34;:1.83,&#34;7&#34;:0.56,&#34;8&#34;:0.5,&#34;9&#34;:0.8,&#34;10&#34;:5.88,&#34;11&#34;:0.96,&#34;12&#34;:1.82,&#34;13&#34;:680},{&#34;0&#34;:3,&#34;1&#34;:12.85,&#34;2&#34;:3.27,&#34;3&#34;:2.58,&#34;4&#34;:22.0,&#34;5&#34;:106,&#34;6&#34;:1.65,&#34;7&#34;:0.6,&#34;8&#34;:0.6,&#34;9&#34;:0.96,&#34;10&#34;:5.58,&#34;11&#34;:0.87,&#34;12&#34;:2.11,&#34;13&#34;:570},{&#34;0&#34;:3,&#34;1&#34;:12.96,&#34;2&#34;:3.45,&#34;3&#34;:2.35,&#34;4&#34;:18.5,&#34;5&#34;:106,&#34;6&#34;:1.39,&#34;7&#34;:0.7,&#34;8&#34;:0.4,&#34;9&#34;:0.94,&#34;10&#34;:5.28,&#34;11&#34;:0.68,&#34;12&#34;:1.75,&#34;13&#34;:675},{&#34;0&#34;:3,&#34;1&#34;:13.78,&#34;2&#34;:2.76,&#34;3&#34;:2.3,&#34;4&#34;:22.0,&#34;5&#34;:90,&#34;6&#34;:1.35,&#34;7&#34;:0.68,&#34;8&#34;:0.41,&#34;9&#34;:1.03,&#34;10&#34;:9.58,&#34;11&#34;:0.7,&#34;12&#34;:1.68,&#34;13&#34;:615},{&#34;0&#34;:3,&#34;1&#34;:13.73,&#34;2&#34;:4.36,&#34;3&#34;:2.26,&#34;4&#34;:22.5,&#34;5&#34;:88,&#34;6&#34;:1.28,&#34;7&#34;:0.47,&#34;8&#34;:0.52,&#34;9&#34;:1.15,&#34;10&#34;:6.62,&#34;11&#34;:0.78,&#34;12&#34;:1.75,&#34;13&#34;:520},{&#34;0&#34;:3,&#34;1&#34;:13.45,&#34;2&#34;:3.7,&#34;3&#34;:2.6,&#34;4&#34;:23.0,&#34;5&#34;:111,&#34;6&#34;:1.7,&#34;7&#34;:0.92,&#34;8&#34;:0.43,&#34;9&#34;:1.46,&#34;10&#34;:10.68,&#34;11&#34;:0.85,&#34;12&#34;:1.56,&#34;13&#34;:695},{&#34;0&#34;:3,&#34;1&#34;:12.82,&#34;2&#34;:3.37,&#34;3&#34;:2.3,&#34;4&#34;:19.5,&#34;5&#34;:88,&#34;6&#34;:1.48,&#34;7&#34;:0.66,&#34;8&#34;:0.4,&#34;9&#34;:0.97,&#34;10&#34;:10.26,&#34;11&#34;:0.72,&#34;12&#34;:1.75,&#34;13&#34;:685},{&#34;0&#34;:3,&#34;1&#34;:13.58,&#34;2&#34;:2.58,&#34;3&#34;:2.69,&#34;4&#34;:24.5,&#34;5&#34;:105,&#34;6&#34;:1.55,&#34;7&#34;:0.84,&#34;8&#34;:0.39,&#34;9&#34;:1.54,&#34;10&#34;:8.66,&#34;11&#34;:0.74,&#34;12&#34;:1.8,&#34;13&#34;:750},{&#34;0&#34;:3,&#34;1&#34;:13.4,&#34;2&#34;:4.6,&#34;3&#34;:2.86,&#34;4&#34;:25.0,&#34;5&#34;:112,&#34;6&#34;:1.98,&#34;7&#34;:0.96,&#34;8&#34;:0.27,&#34;9&#34;:1.11,&#34;10&#34;:8.5,&#34;11&#34;:0.67,&#34;12&#34;:1.92,&#34;13&#34;:630},{&#34;0&#34;:3,&#34;1&#34;:12.2,&#34;2&#34;:3.03,&#34;3&#34;:2.32,&#34;4&#34;:19.0,&#34;5&#34;:96,&#34;6&#34;:1.25,&#34;7&#34;:0.49,&#34;8&#34;:0.4,&#34;9&#34;:0.73,&#34;10&#34;:5.5,&#34;11&#34;:0.66,&#34;12&#34;:1.83,&#34;13&#34;:510},{&#34;0&#34;:3,&#34;1&#34;:12.77,&#34;2&#34;:2.39,&#34;3&#34;:2.28,&#34;4&#34;:19.5,&#34;5&#34;:86,&#34;6&#34;:1.39,&#34;7&#34;:0.51,&#34;8&#34;:0.48,&#34;9&#34;:0.64,&#34;10&#34;:9.899999,&#34;11&#34;:0.57,&#34;12&#34;:1.63,&#34;13&#34;:470},{&#34;0&#34;:3,&#34;1&#34;:14.16,&#34;2&#34;:2.51,&#34;3&#34;:2.48,&#34;4&#34;:20.0,&#34;5&#34;:91,&#34;6&#34;:1.68,&#34;7&#34;:0.7,&#34;8&#34;:0.44,&#34;9&#34;:1.24,&#34;10&#34;:9.7,&#34;11&#34;:0.62,&#34;12&#34;:1.71,&#34;13&#34;:660},{&#34;0&#34;:3,&#34;1&#34;:13.71,&#34;2&#34;:5.65,&#34;3&#34;:2.45,&#34;4&#34;:20.5,&#34;5&#34;:95,&#34;6&#34;:1.68,&#34;7&#34;:0.61,&#34;8&#34;:0.52,&#34;9&#34;:1.06,&#34;10&#34;:7.7,&#34;11&#34;:0.64,&#34;12&#34;:1.74,&#34;13&#34;:740},{&#34;0&#34;:3,&#34;1&#34;:13.4,&#34;2&#34;:3.91,&#34;3&#34;:2.48,&#34;4&#34;:23.0,&#34;5&#34;:102,&#34;6&#34;:1.8,&#34;7&#34;:0.75,&#34;8&#34;:0.43,&#34;9&#34;:1.41,&#34;10&#34;:7.3,&#34;11&#34;:0.7,&#34;12&#34;:1.56,&#34;13&#34;:750},{&#34;0&#34;:3,&#34;1&#34;:13.27,&#34;2&#34;:4.28,&#34;3&#34;:2.26,&#34;4&#34;:20.0,&#34;5&#34;:120,&#34;6&#34;:1.59,&#34;7&#34;:0.69,&#34;8&#34;:0.43,&#34;9&#34;:1.35,&#34;10&#34;:10.2,&#34;11&#34;:0.59,&#34;12&#34;:1.56,&#34;13&#34;:835},{&#34;0&#34;:3,&#34;1&#34;:13.17,&#34;2&#34;:2.59,&#34;3&#34;:2.37,&#34;4&#34;:20.0,&#34;5&#34;:120,&#34;6&#34;:1.65,&#34;7&#34;:0.68,&#34;8&#34;:0.53,&#34;9&#34;:1.46,&#34;10&#34;:9.3,&#34;11&#34;:0.6,&#34;12&#34;:1.62,&#34;13&#34;:840},{&#34;0&#34;:3,&#34;1&#34;:14.13,&#34;2&#34;:4.1,&#34;3&#34;:2.74,&#34;4&#34;:24.5,&#34;5&#34;:96,&#34;6&#34;:2.05,&#34;7&#34;:0.76,&#34;8&#34;:0.56,&#34;9&#34;:1.35,&#34;10&#34;:9.2,&#34;11&#34;:0.61,&#34;12&#34;:1.6,&#34;13&#34;:560}]&#39; . df.head() . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 . 0 1 | 14.23 | 1.71 | 2.43 | 15.6 | 127 | 2.80 | 3.06 | 0.28 | 2.29 | 5.64 | 1.04 | 3.92 | 1065 | . 1 1 | 13.20 | 1.78 | 2.14 | 11.2 | 100 | 2.65 | 2.76 | 0.26 | 1.28 | 4.38 | 1.05 | 3.40 | 1050 | . 2 1 | 13.16 | 2.36 | 2.67 | 18.6 | 101 | 2.80 | 3.24 | 0.30 | 2.81 | 5.68 | 1.03 | 3.17 | 1185 | . 3 1 | 14.37 | 1.95 | 2.50 | 16.8 | 113 | 3.85 | 3.49 | 0.24 | 2.18 | 7.80 | 0.86 | 3.45 | 1480 | . 4 1 | 13.24 | 2.59 | 2.87 | 21.0 | 118 | 2.80 | 2.69 | 0.39 | 1.82 | 4.32 | 1.04 | 2.93 | 735 | . Reading Html document . url = &#39;https://www.fdic.gov/resources/resolutions/bank-failures/failed-bank-list/&#39; dfs = pd.read_html(url) . dfs[0] . Bank Name City State Cert Acquiring Institution Closing Date . 0 Almena State Bank | Almena | KS | 15426 | Equity Bank | October 23, 2020 | . 1 First City Bank of Florida | Fort Walton Beach | FL | 16748 | United Fidelity Bank, fsb | October 16, 2020 | . 2 The First State Bank | Barboursville | WV | 14361 | MVB Bank, Inc. | April 3, 2020 | . 3 Ericson State Bank | Ericson | NE | 18265 | Farmers and Merchants Bank | February 14, 2020 | . 4 City National Bank of New Jersey | Newark | NJ | 21111 | Industrial Bank | November 1, 2019 | . ... ... | ... | ... | ... | ... | ... | . 558 Superior Bank, FSB | Hinsdale | IL | 32646 | Superior Federal, FSB | July 27, 2001 | . 559 Malta National Bank | Malta | OH | 6629 | North Valley Bank | May 3, 2001 | . 560 First Alliance Bank &amp; Trust Co. | Manchester | NH | 34264 | Southern New Hampshire Bank &amp; Trust | February 2, 2001 | . 561 National State Bank of Metropolis | Metropolis | IL | 3815 | Banterra Bank of Marion | December 14, 2000 | . 562 Bank of Honolulu | Honolulu | HI | 21029 | Bank of the Orient | October 13, 2000 | . 563 rows × 6 columns . url_mcc = &#39;https://en.wikipedia.org/wiki/Mobile_country_code&#39; dfs = pd.read_html(url_mcc, match=&#39;Country&#39;, header=0) . dfs[0] . Mobile country code Country ISO 3166 Mobile network codes National MNC authority Remarks . 0 289 | A Abkhazia | GE-AB | List of mobile network codes in Abkhazia | NaN | MCC is not listed by ITU | . 1 412 | Afghanistan | AF | List of mobile network codes in Afghanistan | NaN | NaN | . 2 276 | Albania | AL | List of mobile network codes in Albania | NaN | NaN | . 3 603 | Algeria | DZ | List of mobile network codes in Algeria | NaN | NaN | . 4 544 | American Samoa (United States of America) | AS | List of mobile network codes in American Samoa | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | . 247 452 | Vietnam | VN | List of mobile network codes in the Vietnam | NaN | NaN | . 248 543 | W Wallis and Futuna | WF | List of mobile network codes in Wallis and Futuna | NaN | NaN | . 249 421 | Y Yemen | YE | List of mobile network codes in the Yemen | NaN | NaN | . 250 645 | Z Zambia | ZM | List of mobile network codes in Zambia | NaN | NaN | . 251 648 | Zimbabwe | ZW | List of mobile network codes in Zimbabwe | NaN | NaN | . 252 rows × 6 columns . Reading Excel files . df_excel = pd.read_excel(&#39;marks.XLSX&#39;) . df_excel.head() . S.No. Registration No. Student Name Quiz 1 Ques 1 Ques 2 Ques 3 Ques 4 Total . 0 1 | 189302167 | ANIRUDH GUPTA | AB | 2.5 | 2.5 | 2.5 | 1.0 | 8.5 | . 1 2 | 199302154 | MAHI DHAKRE | 10 | 3.0 | 2.5 | 3.5 | 3.0 | 12.0 | . 2 3 | 199302155 | HARSH GUPTA | 10 | 3.5 | 3.5 | 3.5 | 3.5 | 14.0 | . 3 4 | 199302156 | ARJUN TANEJA | 10 | 3.0 | 3.0 | 3.5 | 3.5 | 13.0 | . 4 5 | 199302157 | AVIRAL RAJ | 10 | 1.5 | 2.0 | 3.5 | 3.0 | 10.0 | . Pickling . All pandas objects are equipped with to_pickle methods which use Python&#39;x cPickle module to save data structures to disk using pickle format . df_excel.to_pickle(&#39;df_excel&#39;) . df = pd.read_pickle(&#39;df_excel&#39;) . df.head() . S.No. Registration No. Student Name Quiz 1 Ques 1 Ques 2 Ques 3 Ques 4 Total . 0 1 | 189302167 | ANIRUDH GUPTA | AB | 2.5 | 2.5 | 2.5 | 1.0 | 8.5 | . 1 2 | 199302154 | MAHI DHAKRE | 10 | 3.0 | 2.5 | 3.5 | 3.0 | 12.0 | . 2 3 | 199302155 | HARSH GUPTA | 10 | 3.5 | 3.5 | 3.5 | 3.5 | 14.0 | . 3 4 | 199302156 | ARJUN TANEJA | 10 | 3.0 | 3.0 | 3.5 | 3.5 | 13.0 | . 4 5 | 199302157 | AVIRAL RAJ | 10 | 1.5 | 2.0 | 3.5 | 3.0 | 10.0 | .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/21/Pandas.html",
            "relUrl": "/2021/04/21/Pandas.html",
            "date": " • Apr 21, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Indexing",
            "content": "numpy is a genral purpose array-processing package . import numpy as np . lst1 = [1,2,3,4] arr = np.array(lst1) . type(arr) . numpy.ndarray . arr . array([1, 2, 3, 4]) . arr.shape . (4,) . list1=[1,2,3,4] list2=[6,7,8,9] list3=[3,4,5,6] arr = np.array([list1,list2,list3]) . arr . array([[1, 2, 3, 4], [6, 7, 8, 9], [3, 4, 5, 6]]) . arr.shape . (3, 4) . arr.reshape(4,3) . array([[1, 2, 3], [4, 6, 7], [8, 9, 3], [4, 5, 6]]) . arr.reshape(1,12) . array([[1, 2, 3, 4, 6, 7, 8, 9, 3, 4, 5, 6]]) . arr.shape . (3, 4) . arr . array([[1, 2, 3, 4], [6, 7, 8, 9], [3, 4, 5, 6]]) . arr[0][1] . 2 . arr[1:,3:] . array([[9], [6]]) . arr[1:,2:] . array([[8, 9], [5, 6]]) . arr[:,2:] . array([[3, 4], [8, 9], [5, 6]]) . arr[0:2,0:2] # always remember left:right is left exact and right is one value greater than actual one . array([[1, 2], [6, 7]]) . Inbuilt functions . arr = np.arange(0,10) . arr . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . arr = np.arange(0,10,step=2) arr . array([0, 2, 4, 6, 8]) . # shift+tab for elaborate the function np.linspace(1,10,50) . array([ 1. , 1.18367347, 1.36734694, 1.55102041, 1.73469388, 1.91836735, 2.10204082, 2.28571429, 2.46938776, 2.65306122, 2.83673469, 3.02040816, 3.20408163, 3.3877551 , 3.57142857, 3.75510204, 3.93877551, 4.12244898, 4.30612245, 4.48979592, 4.67346939, 4.85714286, 5.04081633, 5.2244898 , 5.40816327, 5.59183673, 5.7755102 , 5.95918367, 6.14285714, 6.32653061, 6.51020408, 6.69387755, 6.87755102, 7.06122449, 7.24489796, 7.42857143, 7.6122449 , 7.79591837, 7.97959184, 8.16326531, 8.34693878, 8.53061224, 8.71428571, 8.89795918, 9.08163265, 9.26530612, 9.44897959, 9.63265306, 9.81632653, 10. ]) . print(arr) arr[3:] =100 # replace all indexes starting from 3rd to all by 100 print(arr) . [0 2 4 6 8] [ 0 2 4 100 100] . arr1=arr . arr1[3:]=500 arr1 . array([ 0, 2, 4, 500, 500]) . arr # array is actually a reference type hence change is reflected to actual array also . array([ 0, 2, 4, 500, 500]) . arr1 = arr.copy() arr1 . array([ 0, 2, 4, 500, 500]) . arr1[3:] = 800 print(arr1) print(arr) . [ 0 2 4 800 800] [ 0 2 4 500 500] . Some useful conditions for Exploratorty data analysis . arr = np.array([1,2,3,4,5]) val = 2 . arr . array([1, 2, 3, 4, 5]) . print(arr&lt;2) print(arr*2) print(arr%2) . [ True False False False False] [ 2 4 6 8 10] [1 0 1 0 1] . arr[arr&lt;2] . array([1]) . np.ones((2,5),dtype=int) . array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) . np.ones(4) . array([1., 1., 1., 1.]) . np.random.rand(3,3) . array([[0.97016302, 0.13230666, 0.31222633], [0.85189366, 0.07856671, 0.57296934], [0.71915461, 0.48997742, 0.24332137]]) . arr_ex = np.random.randn(4,4) # selects from random distribution arr_ex . array([[-0.60890655, -0.67170484, -0.28552398, 1.14748824], [-1.27784825, -0.60587355, -0.87103948, -0.75084882], [ 0.1356478 , 0.67908955, -0.18930585, -1.23064491], [ 0.0557476 , 0.96733176, -0.0119645 , 0.94036578]]) . arr_ex.reshape(16,1) . array([[-0.60890655], [-0.67170484], [-0.28552398], [ 1.14748824], [-1.27784825], [-0.60587355], [-0.87103948], [-0.75084882], [ 0.1356478 ], [ 0.67908955], [-0.18930585], [-1.23064491], [ 0.0557476 ], [ 0.96733176], [-0.0119645 ], [ 0.94036578]]) . import seaborn as sns import pandas as pd . sns.distplot(pd.DataFrame(arr_ex.reshape(16,1))) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1b903b859c8&gt; . np.random.randint(0,100,8).reshape(4,2) . array([[17, 74], [67, 13], [91, 60], [92, 75]]) . np.random.random_sample((1,5)) . array([[0.02247093, 0.32708592, 0.95730227, 0.40039247, 0.43461314]]) .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/21/NumPy.html",
            "relUrl": "/2021/04/21/NumPy.html",
            "date": " • Apr 21, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Python-Basics",
            "content": "Introduction . print(&quot;hello&quot;) . hello . a = 1+5j type(a) . complex . a = &quot;siddhant&quot; . type(a) . str . a = &#39;python&#39; print(a) a = &quot;sid&quot; print(a) . python sid . a = &#39;&#39;&#39; this is a multi line this is line 2 &#39;&#39;&#39; . print(a) . this is a multi line this is line 2 . Control Flow Statements . a = -10 . if a&gt;0: print(&quot;positive&quot;) elif a==0: print(&quot;zero&quot;) else: print(&quot;negative&quot;) . negative . Looping statements . while loop . a = 10 while (a&gt;0): print(a) a -= 1 . 10 9 8 7 6 5 4 3 2 1 . For loop . for i in &quot;siddhant&quot;: print(i) . s i d d h a n t . for i in range(1,11,2): print(i) . 1 3 5 7 9 . Arithmetic operator . 10//3 . 3 . 2**5 . 32 . comparision operator . &quot;abc&quot; &gt; &quot;abd&quot; . False . &quot;abc&quot; &gt; &quot;yz&quot; . False . logical operators . isinstance(1,int) . True . isinstance(True,bool) . True . a = True . isinstance(True,bool) . True . type(True) . bool . isinstance(True,int) . True . Functions . def knock(): print(&quot;knock&quot;) print(&quot;knock&quot;) . knock() . knock knock . def knock(name): print(&quot;knock {}&quot;.format(name)) . knock(&#39;sid&#39;) . knock sid . def knock(name, no_of_times): for i in range(no_of_times): print(&#39;knock {}&#39;.format(name)) . knock(&#39;sid&#39;, 6) . knock sid knock sid knock sid knock sid knock sid knock sid . Return statement . def add(a,b): return a+b . x = add(1,2) print(x) . 3 . def div(a,b): try: return a/b except: print(&#39;error&#39;) finally: print(&#39;wrapping up&#39;) . div(10,2) . wrapping up . 5.0 . div(10,0) . error wrapping up . if return statement is inside the finally block --&gt; it will discard the return in try block and will execute return of finally block only . Local and Global variables . x=10 . def show(): print(x) . show() . 10 . x = 10 # global variable def show(): x = 5 # Local variable print(x) . show() print(x) . 5 10 . def outer(): x=&#39;local&#39; def inner(): print(x) # this can access the value of local in outer inner() print(x) # this is printing the actual outer x . outer() . local local . if x is deleted from global declaration then we must write &quot;nonlocal x&quot; in inner function to look for x in outer . Default arguement values . def show(a,b,c): print(a) print(b) print(c) . show(&quot;hunng&quot;, &quot;sunng&quot;,&quot;tung&quot;) . hunng sunng tung . show(b=&quot;hungg&quot;,c=&quot;sunng&quot;,a=&quot;tung&quot;) . tung hungg sunng . print? # shift+enter opens DocString . File &#34;&lt;ipython-input-21-85e8ac2149f3&gt;&#34;, line 1 print? ^ SyntaxError: invalid syntax . packing arguments . def show(a,b,c,*args): print(args) . show(1,2,3,&quot;sidd&quot;) . (&#39;sidd&#39;,) . def show(a,b,c,*args,d=10,e=30): print(a) print(args) print(d) print(e) . show(1,2,3,&#39;sid&#39;,&#39;dy&#39;,d=100) . 1 (&#39;sid&#39;, &#39;dy&#39;) 100 30 . def show(a,b,c,*args,d=10,e=30,**kwargs): print(a) print(args) print(d) print(e) print(kwargs) . show(1,2,3,&#39;sid&#39;,&#39;dy&#39;,d=100,name = &#39;sidd&#39;) . 1 (&#39;sid&#39;, &#39;dy&#39;) 100 30 {&#39;name&#39;: &#39;sidd&#39;} . Lambda functions . syntactical sugars . def add(a,b): return a+b . add = lambda a,b: a+b . a= [1,2,3,4,5] . sorted(a) . [1, 2, 3, 4, 5] . a = [(&quot;jatin&quot;,5),(&quot;prateek&quot;,10),(&quot;ram&quot;,1),(&quot;arnav&quot;,20)] . sorted? . sorted(a) . [(&#39;arnav&#39;, 20), (&#39;jatin&#39;, 5), (&#39;prateek&#39;, 10), (&#39;ram&#39;, 1)] . . sorted(a,key = lambda x:x[1]) . [(&#39;ram&#39;, 1), (&#39;jatin&#39;, 5), (&#39;prateek&#39;, 10), (&#39;arnav&#39;, 20)] . . def key(x): return x[1] . sorted(a, key=key) . [(&#39;ram&#39;, 1), (&#39;jatin&#39;, 5), (&#39;prateek&#39;, 10), (&#39;arnav&#39;, 20)] . Decorators . #dictionary users users = { &quot;jatin&quot;:&quot;password&quot;, &quot;prateek&quot;:&quot;Coding blocks&quot; } def show(username,password): if username in users and users[username] == password: print(&quot;crackerd&quot;) else: print(&quot;not authenticated&quot;) . show(&quot;jatin&quot;,&quot;password&quot;) . crackerd . def temp(*args,**kwargs): print(args) print(kwargs) . a = (1,2,3) . temp(a) #tuple printed inside another tuple . ((1, 2, 3),) {} . temp(*a) #tuple got inflated by args and print objects . (1, 2, 3) {} . def login_required(func): def wrapper(username,password,*args,**kwargs): if username in users and users[username] == password: # user is authenticated func(*args,**kwargs) else: print(&quot;not authenticated&quot;) return wrapper . def add(a,b): print(a+b) add = login_required(add) . @login_required def add(a,b): print (a+b) . add(&quot;prateek&quot;,&quot;Coding blocks&quot;,1,2) . 3 . protected_add = login_required(add) . print(protected_add) . &lt;function login_required.&lt;locals&gt;.wrapper at 0x000001E016B94D38&gt; . protected_add(&quot;jatin&quot;,&quot;password&quot;, 1, 2) . 3 . Args and Kwargs . def fun(*args): print (args) . fun(1) . (1,) . fun(1,2,3,4) . (1, 2, 3, 4) . def fun2(a,b,*args): print(args) print(a) print(b) . fun2(1,2,3,4) . (3, 4) . def fun3(a,b,*x,**kwargs): print(x) print(kwargs) type(x) print(type(x)) type(kwargs) print(type(kwargs)) . fun3(1,2,3,4,5,6,shake=&quot;vanilla&quot;) . (3, 4, 5, 6) {&#39;shake&#39;: &#39;vanilla&#39;} &lt;class &#39;tuple&#39;&gt; &lt;class &#39;dict&#39;&gt; . Introduction to Strings . a = &quot;siddy&quot; . print(a) . siddy . a=&#39;siddy&#39; . print(a) . siddy . a = &quot;&quot;&quot; multilne string siddy &quot;&quot;&quot; . a . &#39; n multilne string n siddy n &#39; . ord? chr? . Basic String operations . a=&quot;siddy&quot; b=2 c=3 print(str(a)+&quot;-&quot;+str(b)+&quot;-&quot;+str(c)) . siddy-2-3 . print(&quot;%d-%d-%d&quot; % (a,b,c))#error occured because of wrong format . TypeError Traceback (most recent call last) &lt;ipython-input-18-5ba7d1200a95&gt; in &lt;module&gt; -&gt; 1 print(&#34;%d-%d-%d&#34; % (a,b,c))#error occured because of wrong format TypeError: %d format: a number is required, not str . print(&quot;{}-{}-{}&quot;.format(a,b,c)) . siddy-2-3 . print(&quot;{1}={0}={2}&quot;.format(a,b,c)) . 2=siddy=3 . print(&quot;{lastname},{firstname}&quot;.format(firstname = &quot;siddy&quot;, lastname = &quot;saxena&quot;)) . saxena,siddy . firstname = &quot;siddy&quot; lastname = &quot;saxena&quot; . print(f&quot;{lastname},{firstname}&quot;) . saxena,siddy . a = &quot; siddy &quot; . a . &#39; siddy &#39; . print(a.strip()) . siddy . a = input() #during input we give extra space by mistake then . yes . a== &quot;yes&quot; . False . a.strip() == &quot;yes&quot; #by using strip function extra space is removed . True . a= input() . 1 2 3 4 5 . a . &#39;1 2 3 4 5 &#39; . a.split(&#39; &#39;) . [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;&#39;] . a = &quot;siddy&quot; . a.replace(&#39;i&#39;,&#39;1&#39;) . &#39;s1ddy&#39; . a = &#39;aaabbbccc&#39; a.count(&#39;a&#39;) . 3 . a.count(&#39;aa&#39;) . 1 . Introduction to lists . a =[1,2,3,4,5] id(a) # gives memory address of a . 2836804091144 . a . [1, 2, 3, 4, 5] . a=[&quot;siddy&quot;,1,0.6,print] . a[3] . &lt;function print&gt; . a[2] = 8 #mutability . a[2] print(id(a)) . 2836804091144 . a[3](&quot;siddhant&quot;) . siddhant . a*2 . [&#39;siddy&#39;, 1, 0.6, &lt;function print&gt;, &#39;siddy&#39;, 1, 0.6, &lt;function print&gt;] . len(a) . 4 . 1 in a . True . for x in a : print(x) . siddy 1 0.6 &lt;built-in function print&gt; . #backword indexing a[-2] . 0.6 . a[1:5] . [1, 0.6, &lt;function print&gt;] . a = [1,2,3,4,5] . a[1:4] . [2, 3, 4] . a[0:5] . [1, 2, 3, 4, 5] . a[::-1] . [5, 4, 3, 2, 1] . a = &quot;nitin&quot; . a == a[::-1] . True . a = [1,2,3,4,5] . a.insert? . a.insert(1,&#39;sid&#39;) . a . [1, &#39;sid&#39;, 2, 3, 4, 5] . a.append(&quot;saxena&quot;) . a . [1, &#39;sid&#39;, 2, 3, 4, 5, &#39;saxena&#39;] . a.pop() . &#39;saxena&#39; . a . [1, &#39;sid&#39;, 2, 3, 4, 5] . a.pop(2) . 2 . a . [1, &#39;sid&#39;, 3, 4, 5] . a = [&quot;sid&quot;,&quot;sad&quot;,&quot;tit&quot;,&quot;sad&quot;] . a.remove(&quot;sad&quot;) . a . [&#39;sid&#39;, &#39;tit&#39;, &#39;sad&#39;] . del a[1] . a . [&#39;sid&#39;, &#39;sad&#39;] . . a = [1,4,5,3,7,2] . sorted(a) # returns the list . [1, 2, 3, 4, 5, 7] . a.sort() # sorts list inplace hence do not return the list . a . [1, 2, 3, 4, 5, 7] . . for x in reversed(a): print(x) . 7 5 4 3 2 1 . a.reverse() . a . [7, 5, 4, 3, 2, 1] . Tuples . a = (1,2,3,4,5) b = 1,2 . print(a) print(b) . (1, 2, 3, 4, 5) (1, 2) . a[0] =9 . TypeError Traceback (most recent call last) &lt;ipython-input-61-e5f0dc60e901&gt; in &lt;module&gt; 1 # not mutable 2 -&gt; 3 a[0] =9 TypeError: &#39;tuple&#39; object does not support item assignment . a =5 b = 9 temp = a a = b b = temp . print(a,b) . 9 5 . a = (5,8) . c,d = a . c . 5 . d . 8 . a =5 b=9 . b,a = a,b . print(a,b) . 5 9 . . a = (1,2,3,4) a = list(a) . a . [1, 2, 3, 4] . . def addSubstract(a,b): return a+b,a-b . sum, diff = addSubstract(9,3) . sum . 12 . diff . 6 . Dictionary . . a = { &quot;name&quot;:&quot;siddhant&quot;, &quot;phonne&quot;:7771088776, &quot;subjects&quot;:[&quot;eng&quot;,&quot;math&quot;], &quot;friends&quot;:{ &quot;pulkit&quot;:&quot;android dev&quot; } } . a[&quot;name&quot;] . &#39;siddhant&#39; . a[&quot;friends&quot;] . {&#39;pulkit&#39;: &#39;android dev&#39;} . for key in a : print(key) . name phonne subjects friends . . for key,values in a.items(): print(key,&quot;=&gt;&quot;,values) . name =&gt; siddhant phonne =&gt; 7771088776 subjects =&gt; [&#39;eng&#39;, &#39;math&#39;] friends =&gt; {&#39;pulkit&#39;: &#39;android dev&#39;} . . students = [] . n = int(input()) . 2 . for x in range(n): roll= int(input()) name= input() branch= input() students.append({ &quot;roll_no&quot;:roll, &quot;name&quot;:name, &quot;branch&quot;:branch }) . 2 sdfg it 3 dfgh cce . for s in students: print(s) . {&#39;roll_no&#39;: 2, &#39;name&#39;: &#39;sdfg&#39;, &#39;branch&#39;: &#39;it&#39;} {&#39;roll_no&#39;: 3, &#39;name&#39;: &#39;dfgh&#39;, &#39;branch&#39;: &#39;cce&#39;} . students . [{&#39;roll_no&#39;: 2, &#39;name&#39;: &#39;sdfg&#39;, &#39;branch&#39;: &#39;it&#39;}, {&#39;roll_no&#39;: 3, &#39;name&#39;: &#39;dfgh&#39;, &#39;branch&#39;: &#39;cce&#39;}] . sets . a = {1,2,3,4,5} . type(a) . set . b = {3,4,5,6,7} . a.intersection(b) . {3, 4, 5} . a.union(b) . {1, 2, 3, 4, 5, 6, 7} . a = {1,2,3,4,5,4,6,3} . a . {1, 2, 3, 4, 5, 6} . len(a) . 6 . . a = [1,2,1,1,2] #remove duplicates . list(set(a)) #list - &gt; set -&gt; list conversion . [1, 2] . Comprehension of DS in Python . a = [] for x in range(10): a.append(x**2) . print(a) . [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] . List Comprehension . [x**2 for x in range(10)] . [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] . [x**2 for x in range(10) if x%2 == 0] . [0, 4, 16, 36, 64] . Dictionary Comprehension . {i:i**2 for i in range(10)} . {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81} . Set Comprehension . {i**2 for i in range(10)} . {0, 1, 4, 9, 16, 25, 36, 49, 64, 81} . OOP Basics . class Person: pass . p = Person() . print(p) # person class executed in main module . &lt;__main__.Person object at 0x00000159C8DA9708&gt; . hex(id(p)) #hex value of address . &#39;0x159c8da9708&#39; . a = 1 # every thing in python is a class . print(type(a)) . &lt;class &#39;int&#39;&gt; . a = 1 . print(isinstance(a,object)) . True . The _init_method . class Person: name = &quot;siddy&quot; def say_hi(self): print(&quot;hello my name is &quot;,self.name) . p = Person() . p.say_hi() . hello my name is siddy . Person.say_hi(p) . hello my name is siddy . class Person: def __init__(self, name): print(&quot;a new object is created&quot;) self.name = name def say_hi(self): print(&quot;hello my name is &quot;,self.name) . p = Person(&quot;siddy&quot;) . a new object is created . p.say_hi() . hello my name is siddy . Dunders and Magic methods . class Car: def __init__(self,model,milage): self.model = model self.milage = milage def __str__(self): return &quot;{} {}&quot;.format(self.model,self.milage) def __repr(self): # representation function that&#39;ll jst gonna print model of it return &#39;{}&#39;.format(self.model) def __eq__(self,other): #equal to operator return self.milage == other.milage def __add__(self,other): return self.milage + other.milage . c1 = Car(&#39;a&#39;,2) c2 = Car(&#39;b&#39;,3) . c1+c2 . 5 . c1==c2 . False . google dunders in python in docs of python - - data model . . class Ostream: def __lshift__(self,other): print(other, end = &#39;&#39;) return self # this is important because id eqtn is cout&lt;&lt;&quot;siddy&quot;&lt;&lt;&quot;saxena&quot; then for &lt;&lt;&quot;saxena&quot; self should returned again cout = Ostream() . cout&lt;&lt;&quot;siddy&quot;&lt;&lt;&quot; &quot;&lt;&lt;&quot;should&quot; . siddy should . &lt;__main__.Ostream at 0x180f9366088&gt; . . class Dog: kind = &#39;canine&#39; # class attribute(variable)shared by all instances def __init__(self,name): self.name = name . a = Dog(&#39;tuffy&#39;) . a.kind #gives output canine because it was copied in &quot;Object oriented programming and modules.ipynb&quot; . &#39;canine&#39; . b = Dog(&#39;xxx&#39;) . b.kind = &#39;something&#39; . b.kind . &#39;something&#39; . a.kind . &#39;canine&#39; . class Dog: tricks = [] def __init__(self,name): self.name = name def add_trick(self,trick): self.tricks.append(trick) . a = Dog(&#39;xxx&#39;) . b = Dog(&#39;yyy&#39;) . a.add_trick(&#39;fetch &#39;) . a.add_trick(&#39;talk&#39;) . a.tricks . [&#39;fetch &#39;, &#39;talk&#39;] . b.tricks . [&#39;fetch &#39;, &#39;talk&#39;] . id(a.tricks) . 2752786024520 . id(b.tricks) . 2752786024520 . . . class Dog: def __init__(self,name): self.name = name self.tricks = [] def add_trick(self,trick): self.tricks.append(trick) . Inheritance . class SchoolMember: def __init__(self,name,age): self.name = name self.age = age print(&quot;(Inintialised member = {})&quot;.format(self.name)) def tell(self): print(&#39;name:&quot;{}&quot; Age:&quot;{}&quot;&#39;.format(self.name,self.age),end = &quot; &quot;) class Teacher(SchoolMember): def __init__(self,name,age,salary): super().__init__(name,age) # same as SchoolMember.__init__(self,name,age) overriding self.salary = salary print(&quot;Initialised Teacher: {}&quot;.format(self.name)) def tell(self): SchoolMember.tell(self) print(&#39;salary: {:d}&#39;.format(self.salary)) class Student(SchoolMember): def __init__ (self,name,age,marks): SchoolMember.__init__(self,name,age) self.marks = marks print(&#39;(itialised Student &quot;{}&quot;)&#39;.format(self.name)) def tell(self): SchoolMember.tell(self) print(&#39;marks: &quot;{:d}&quot;&#39;.format(self.marks)) . t = Teacher(&quot;mrsiddy&quot;,40,30000) s = Student(&quot;sid&quot;,40,70) . (Inintialised member = mrsiddy) Initialised Teacher: mrsiddy (Inintialised member = sid) (itialised Student &#34;sid&#34;) . Method Resolution Order . . class A: x = 10 class B(A): pass class C(A): x = 5 class D(C): x = 5 class E(B, D): pass . E.x . 5 . E.__mro__ . (__main__.E, __main__.B, __main__.D, __main__.C, __main__.A, object) . Modules in python . PYTHON-07-Iterators and Generators . x = [1,2,3] # iterable . x_iter = iter(x) . x_iter . &lt;list_iterator at 0x1cb81be2f48&gt; . next(x_iter) . 1 . next(x_iter) . 3 . Making our own Iterator . class yrange: def __init__ (self,n): self.i=0 self.n =n def __iter__(self): return self def __next__(self): if self.i&lt;self.n: i = self.i self.i += 1 return i else: raise StopIteration() . for x in yrange(5): print(x) . 0 1 2 3 4 . y = yrange(5) . list(y) . [0, 1, 2, 3, 4] . list(y) # can not consume multiple times . [] . y_iter = iter(y) . y_iter . &lt;__main__.yrange at 0x1cb81bebfc8&gt; . next(y_iter) . 1 . next(y_iter) . # this is an iterable class class zrange: def __init__ (self,n): self.n =n def __iter__ (self): return zrange_iter(self.n) # this is an iterator class class zrange_iter: def __init__ (self, n): self.i = 0 self.n =n def __iter__ (self): return self def __next__(self): if self.i &lt;self.n: i = self.i self.i += 1 return i else: raise StopIteration() . for x in zrange(5): print(x**2) . 0 1 4 9 16 . z = zrange(10) # now we can consume it multiple times . list(z) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . list(z) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Iterators . a = [1,[2,3],4] for x in a: print(x) . 1 [2, 3] 4 . name = &#39;siddy&#39; for char in name: print(char) . s i d d y . d = { &quot;name&quot; :&quot;siddy&quot;, &quot;class&quot;:&quot;ITc&quot;, &quot;marks&quot;:200 } . for x in d: print(x) #return keys . name class marks . for line in open(&quot;iterator.txt&quot;,&quot;r&quot;): print(line) . hello my name is siddy . . &quot;.&quot;.join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]) . &#39;a.b.c&#39; . a = list(&quot;siddy&quot;) . a . [&#39;s&#39;, &#39;i&#39;, &#39;d&#39;, &#39;d&#39;, &#39;y&#39;] . Generators . # 0 1 1 2 3 5 8 . class fib: def __init__(self): self.prev = 0 self.curr = 1 def __iter__(self): # this class is also an iterator return self def __next__(self): value = self.curr self.curr += self.prev self.prev = value return value . f = iter(fib()) . next(f) . 55 . . def fib(): prev, curr = 0, 1 while True: yield curr prev, curr =curr, prev+curr . type(fib()) . generator . gen = fib() . next(gen) . 2 . . gen = (x**2 for x in range(1,11)) . print(gen) . &lt;generator object &lt;genexpr&gt; at 0x000001CB81BDD648&gt; . next(gen) . 16 . next(gen) . StopIteration Traceback (most recent call last) &lt;ipython-input-94-6e72e47198db&gt; in &lt;module&gt; -&gt; 1 next(gen) StopIteration: . PYTHON-06-File and Error handling . TEXT Files . Opening a file . file = open(&quot;filehandeling.txt&quot;,&quot;r&quot;) . file.read(4) . file.read() . we can also provide no of bytes it needs to read . file.read(4) . closing a file . it is a vimp task , coz if file is not closed it might lead to file getting corrupted . file.close() . Writing to a file . file = open(&quot;writemode.txt&quot;,&quot;w&quot;) . file.write(&quot;helllo from other side&quot;) # returns us a integer which rep no of bytes which are written to this file . file.close() . Reading from a file . file = open(&quot;filehandeling.txt&quot;,&quot;r&quot;) . file.readline() #read lines according to no of time executed . file.readlines() # read the file in one go and created the list of all lines . file.close() . Moving the cursor . seek(n) - takes the file handle to the nth byte from the begining . file = open(&quot;writemode.txt&quot;,&#39;r&#39;) . file.read(5) . file.read() # ill be missing the first 5 characters bcoz cursor moved there . file.seek(0) . file.read() . file.close() . Smarter way of opening files . with statement- open this file in read mode and resultant of this file will be stored in file object . with open(&quot;writemode.txt&quot;,&#39;r&#39;) as file: print(file.read()) file.seek(5) print(file.read()) . but if we want file.read() out side of block it will throw error . working with JSON files . import json . with open(&quot;data.json&quot;,&quot;r&quot;) as file: print(file.read()) . json.load() method . with open(&quot;data.json&quot;,&quot;r&quot;) as file: d = json.load(file) print(d) print(type(d)) print(d[&quot;name&quot;]) print(d[&quot;marks&quot;]) print(d[&quot;subject&quot;][0]) . using strings . with open(&quot;data.json&quot;,&quot;r&quot;) as file: data = file.read() . print(data) d = json.loads(data) #s in loads represent string . print(d) . convert a dictionary to json files or a json string . d ={&#39;name&#39;: &#39;siddy&#39;, &#39;marks&#39;: 90, &#39;subject&#39;: [&#39;eng&#39;, &#39;math&#39;]} . string = json.dumps(d) . print(string) . print(type(string)) . creating a josn file from a dictionary . d ={&#39;name&#39;: &#39;siddy&#39;, &#39;marks&#39;: 90, &#39;subject&#39;: [&#39;eng&#39;, &#39;math&#39;]} . while open(&quot;data2.json&quot;, &quot;w&quot;) as file: json.dump(d,file) . Error &amp; Exception handling . -try -except . def div(a, b): print(a/b) . div(10, 0) . def div2(a, b): try: print(a/b) except: print(&quot;not executable&quot;) . div2(10, 0) . modification in except block . def div2(a, b): try: print(a/b) except ZeroDivisionError : print(&quot;not executable&quot;) . div2(10,0) . type conversion example except expression wont work here . try: a = int(&quot;sid&quot;) . except ZeroDivisionError : print(&quot;error&quot;) . to handle multiple exception cases . try: a = int(&quot;sid&quot;) . except ZeroDivisionError : print(&quot;error&quot;) . except : print(&quot;some error occures&quot;) . def div3(a, b): try: print(a/b) except Exception as e: # base class in python from which all exceptions are derrived print(e) . Creating exception . raise statement . try : raise Exception(&quot;my custom error&quot;,1,2) except Exception as e: print(e) . class MyExceptions(Exception): def init(self, message): self.message = message def str (self): return self.message . try: raise MyException (&quot;some error&quot;) expect Expection as e : print(e.messabe) . Else statement - will always execute if the try block didnt threw any error . Filnally statement - will always execute . try: print(&quot;hello world&quot;) print(10/0) except: print(&quot;error&quot;) else: print(&quot;woah&quot;) finally: #used for cleaning code print(&quot;bye bye&quot;) . def func(): try: return 1 # here return statement of try will get truncated finally: return 2 # will executed any how . func() . With statement - when we have pre defined clean-up action . try: file = open(&quot;abc.txt&quot;,&quot;r&quot;) print(file.read()) except Exception as e: print(e) . finally: file.close() . with open(&quot;abc.txt&quot;,&quot;r&quot;) as file: print(file.read()) . to use with statement compitable for class we have to include two dunders enter and exit . class A: def init(self,n): self.n = n def str (self): return str(self.n) def enter (self): return self def exit (self, *args): print(args) return True . with A(5) as a: print(a) raise 10/0 print(&quot;hello&quot;) .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/2021/04/20/INTRODUCTORY-PYTHON.html",
            "relUrl": "/2021/04/20/INTRODUCTORY-PYTHON.html",
            "date": " • Apr 20, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mr-siddy.github.io/The-Student-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mr-siddy.github.io/The-Student-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey 👋🏽, I’m Siddhant! . . . Hi, I’m Siddhant saxena, a Machine Learning novice and am very passionate about Artificial Intelligence 🚀 . I’m from India and am currently looking to collaborate on ML/DL projects and would love to work with like-minded individuals. . Talking about Me: . 💻 I’m currently working on ML Projects and am looking for collaborators; | 🌱 I’m currently learning Computer Vision; | 💬 Ask me about anything, I’d try my best to help; | 📫 How to reach me: mrsiddy.py@gmail.com; | . . . ⭐️ From Siddhant .",
          "url": "https://mr-siddy.github.io/The-Student-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mr-siddy.github.io/The-Student-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}